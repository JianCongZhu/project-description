// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hotspot_HW_buffer_store (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        result_address0,
        result_ce0,
        result_we0,
        result_d0,
        store_flag,
        dest,
        source_0_address0,
        source_0_ce0,
        source_0_q0,
        source_1_address0,
        source_1_ce0,
        source_1_q0,
        source_2_address0,
        source_2_ce0,
        source_2_q0,
        source_3_address0,
        source_3_ce0,
        source_3_q0,
        source_4_address0,
        source_4_ce0,
        source_4_q0,
        source_5_address0,
        source_5_ce0,
        source_5_q0,
        source_6_address0,
        source_6_ce0,
        source_6_q0,
        source_7_address0,
        source_7_ce0,
        source_7_q0,
        source_8_address0,
        source_8_ce0,
        source_8_q0,
        source_9_address0,
        source_9_ce0,
        source_9_q0,
        source_10_address0,
        source_10_ce0,
        source_10_q0,
        source_11_address0,
        source_11_ce0,
        source_11_q0,
        source_12_address0,
        source_12_ce0,
        source_12_q0,
        source_13_address0,
        source_13_ce0,
        source_13_q0,
        source_14_address0,
        source_14_ce0,
        source_14_q0,
        source_15_address0,
        source_15_ce0,
        source_15_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] result_address0;
output   result_ce0;
output   result_we0;
output  [511:0] result_d0;
input  [0:0] store_flag;
input  [19:0] dest;
output  [7:0] source_0_address0;
output   source_0_ce0;
input  [31:0] source_0_q0;
output  [7:0] source_1_address0;
output   source_1_ce0;
input  [31:0] source_1_q0;
output  [7:0] source_2_address0;
output   source_2_ce0;
input  [31:0] source_2_q0;
output  [7:0] source_3_address0;
output   source_3_ce0;
input  [31:0] source_3_q0;
output  [7:0] source_4_address0;
output   source_4_ce0;
input  [31:0] source_4_q0;
output  [7:0] source_5_address0;
output   source_5_ce0;
input  [31:0] source_5_q0;
output  [7:0] source_6_address0;
output   source_6_ce0;
input  [31:0] source_6_q0;
output  [7:0] source_7_address0;
output   source_7_ce0;
input  [31:0] source_7_q0;
output  [7:0] source_8_address0;
output   source_8_ce0;
input  [31:0] source_8_q0;
output  [7:0] source_9_address0;
output   source_9_ce0;
input  [31:0] source_9_q0;
output  [7:0] source_10_address0;
output   source_10_ce0;
input  [31:0] source_10_q0;
output  [7:0] source_11_address0;
output   source_11_ce0;
input  [31:0] source_11_q0;
output  [7:0] source_12_address0;
output   source_12_ce0;
input  [31:0] source_12_q0;
output  [7:0] source_13_address0;
output   source_13_ce0;
input  [31:0] source_13_q0;
output  [7:0] source_14_address0;
output   source_14_ce0;
input  [31:0] source_14_q0;
output  [7:0] source_15_address0;
output   source_15_ce0;
input  [31:0] source_15_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg result_ce0;
reg result_we0;
reg source_0_ce0;
reg source_1_ce0;
reg source_2_ce0;
reg source_3_ce0;
reg source_4_ce0;
reg source_5_ce0;
reg source_6_ce0;
reg source_7_ce0;
reg source_8_ce0;
reg source_9_ce0;
reg source_10_ce0;
reg source_11_ce0;
reg source_12_ce0;
reg source_13_ce0;
reg source_14_ce0;
reg source_15_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] i_reg_315;
wire   [0:0] store_flag_read_read_fu_88_p2;
wire  signed [20:0] dest_cast_fu_326_p1;
reg  signed [20:0] dest_cast_reg_486;
wire   [8:0] i_2_fu_330_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln2095_fu_336_p2;
reg   [0:0] icmp_ln2095_reg_496;
reg   [0:0] icmp_ln2095_reg_496_pp0_iter1_reg;
wire   [7:0] trunc_ln2227_fu_362_p1;
reg   [7:0] trunc_ln2227_reg_580;
reg   [7:0] trunc_ln2227_reg_580_pp0_iter1_reg;
reg   [31:0] source_0_load_reg_585;
reg   [31:0] source_1_load_reg_590;
reg   [31:0] source_2_load_reg_595;
reg   [31:0] source_3_load_reg_600;
reg   [31:0] source_4_load_reg_605;
reg   [31:0] source_5_load_reg_610;
reg   [31:0] source_6_load_reg_615;
reg   [31:0] source_7_load_reg_620;
reg   [31:0] source_8_load_reg_625;
reg   [31:0] source_9_load_reg_630;
reg   [31:0] source_10_load_reg_635;
reg   [31:0] source_11_load_reg_640;
reg   [31:0] source_12_load_reg_645;
reg   [31:0] source_13_load_reg_650;
reg   [31:0] source_14_load_reg_655;
reg   [31:0] source_15_load_reg_660;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln2095_fu_342_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln2227_1_fu_477_p1;
wire   [31:0] bitcast_ln2101_15_fu_411_p1;
wire   [31:0] bitcast_ln2101_14_fu_408_p1;
wire   [31:0] bitcast_ln2101_13_fu_405_p1;
wire   [31:0] bitcast_ln2101_12_fu_402_p1;
wire   [31:0] bitcast_ln2101_11_fu_399_p1;
wire   [31:0] bitcast_ln2101_10_fu_396_p1;
wire   [31:0] bitcast_ln2101_9_fu_393_p1;
wire   [31:0] bitcast_ln2101_8_fu_390_p1;
wire   [31:0] bitcast_ln2101_7_fu_387_p1;
wire   [31:0] bitcast_ln2101_6_fu_384_p1;
wire   [31:0] bitcast_ln2101_5_fu_381_p1;
wire   [31:0] bitcast_ln2101_4_fu_378_p1;
wire   [31:0] bitcast_ln2101_3_fu_375_p1;
wire   [31:0] bitcast_ln2101_2_fu_372_p1;
wire   [31:0] bitcast_ln2101_1_fu_369_p1;
wire   [31:0] bitcast_ln2101_fu_366_p1;
wire   [13:0] shl_ln_fu_451_p3;
wire   [20:0] zext_ln2227_fu_458_p1;
wire   [20:0] add_ln2227_fu_462_p2;
wire   [14:0] lshr_ln_fu_467_p4;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (store_flag_read_read_fu_88_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (store_flag_read_read_fu_88_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (store_flag_read_read_fu_88_p2 == 1'd1))) begin
        i_reg_315 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln2095_fu_336_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_315 <= i_2_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dest_cast_reg_486 <= dest_cast_fu_326_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln2095_reg_496 <= icmp_ln2095_fu_336_p2;
        icmp_ln2095_reg_496_pp0_iter1_reg <= icmp_ln2095_reg_496;
        trunc_ln2227_reg_580_pp0_iter1_reg <= trunc_ln2227_reg_580;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln2095_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        source_0_load_reg_585 <= source_0_q0;
        source_10_load_reg_635 <= source_10_q0;
        source_11_load_reg_640 <= source_11_q0;
        source_12_load_reg_645 <= source_12_q0;
        source_13_load_reg_650 <= source_13_q0;
        source_14_load_reg_655 <= source_14_q0;
        source_15_load_reg_660 <= source_15_q0;
        source_1_load_reg_590 <= source_1_q0;
        source_2_load_reg_595 <= source_2_q0;
        source_3_load_reg_600 <= source_3_q0;
        source_4_load_reg_605 <= source_4_q0;
        source_5_load_reg_610 <= source_5_q0;
        source_6_load_reg_615 <= source_6_q0;
        source_7_load_reg_620 <= source_7_q0;
        source_8_load_reg_625 <= source_8_q0;
        source_9_load_reg_630 <= source_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln2095_fu_336_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln2227_reg_580 <= trunc_ln2227_fu_362_p1;
    end
end

always @ (*) begin
    if ((icmp_ln2095_fu_336_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln2095_reg_496_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_0_ce0 = 1'b1;
    end else begin
        source_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_10_ce0 = 1'b1;
    end else begin
        source_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_11_ce0 = 1'b1;
    end else begin
        source_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_12_ce0 = 1'b1;
    end else begin
        source_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_13_ce0 = 1'b1;
    end else begin
        source_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_14_ce0 = 1'b1;
    end else begin
        source_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_15_ce0 = 1'b1;
    end else begin
        source_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_1_ce0 = 1'b1;
    end else begin
        source_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_2_ce0 = 1'b1;
    end else begin
        source_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_3_ce0 = 1'b1;
    end else begin
        source_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_4_ce0 = 1'b1;
    end else begin
        source_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_5_ce0 = 1'b1;
    end else begin
        source_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_6_ce0 = 1'b1;
    end else begin
        source_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_7_ce0 = 1'b1;
    end else begin
        source_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_8_ce0 = 1'b1;
    end else begin
        source_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        source_9_ce0 = 1'b1;
    end else begin
        source_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (store_flag_read_read_fu_88_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (store_flag_read_read_fu_88_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln2095_fu_336_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln2095_fu_336_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln2227_fu_462_p2 = ($signed(zext_ln2227_fu_458_p1) + $signed(dest_cast_reg_486));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln2101_10_fu_396_p1 = source_10_load_reg_635;

assign bitcast_ln2101_11_fu_399_p1 = source_11_load_reg_640;

assign bitcast_ln2101_12_fu_402_p1 = source_12_load_reg_645;

assign bitcast_ln2101_13_fu_405_p1 = source_13_load_reg_650;

assign bitcast_ln2101_14_fu_408_p1 = source_14_load_reg_655;

assign bitcast_ln2101_15_fu_411_p1 = source_15_load_reg_660;

assign bitcast_ln2101_1_fu_369_p1 = source_1_load_reg_590;

assign bitcast_ln2101_2_fu_372_p1 = source_2_load_reg_595;

assign bitcast_ln2101_3_fu_375_p1 = source_3_load_reg_600;

assign bitcast_ln2101_4_fu_378_p1 = source_4_load_reg_605;

assign bitcast_ln2101_5_fu_381_p1 = source_5_load_reg_610;

assign bitcast_ln2101_6_fu_384_p1 = source_6_load_reg_615;

assign bitcast_ln2101_7_fu_387_p1 = source_7_load_reg_620;

assign bitcast_ln2101_8_fu_390_p1 = source_8_load_reg_625;

assign bitcast_ln2101_9_fu_393_p1 = source_9_load_reg_630;

assign bitcast_ln2101_fu_366_p1 = source_0_load_reg_585;

assign dest_cast_fu_326_p1 = $signed(dest);

assign i_2_fu_330_p2 = (i_reg_315 + 9'd1);

assign icmp_ln2095_fu_336_p2 = ((i_reg_315 == 9'd256) ? 1'b1 : 1'b0);

assign lshr_ln_fu_467_p4 = {{add_ln2227_fu_462_p2[20:6]}};

assign result_address0 = zext_ln2227_1_fu_477_p1;

assign result_d0 = {{{{{{{{{{{{{{{{bitcast_ln2101_15_fu_411_p1}, {bitcast_ln2101_14_fu_408_p1}}, {bitcast_ln2101_13_fu_405_p1}}, {bitcast_ln2101_12_fu_402_p1}}, {bitcast_ln2101_11_fu_399_p1}}, {bitcast_ln2101_10_fu_396_p1}}, {bitcast_ln2101_9_fu_393_p1}}, {bitcast_ln2101_8_fu_390_p1}}, {bitcast_ln2101_7_fu_387_p1}}, {bitcast_ln2101_6_fu_384_p1}}, {bitcast_ln2101_5_fu_381_p1}}, {bitcast_ln2101_4_fu_378_p1}}, {bitcast_ln2101_3_fu_375_p1}}, {bitcast_ln2101_2_fu_372_p1}}, {bitcast_ln2101_1_fu_369_p1}}, {bitcast_ln2101_fu_366_p1}};

assign shl_ln_fu_451_p3 = {{trunc_ln2227_reg_580_pp0_iter1_reg}, {6'd0}};

assign source_0_address0 = zext_ln2095_fu_342_p1;

assign source_10_address0 = zext_ln2095_fu_342_p1;

assign source_11_address0 = zext_ln2095_fu_342_p1;

assign source_12_address0 = zext_ln2095_fu_342_p1;

assign source_13_address0 = zext_ln2095_fu_342_p1;

assign source_14_address0 = zext_ln2095_fu_342_p1;

assign source_15_address0 = zext_ln2095_fu_342_p1;

assign source_1_address0 = zext_ln2095_fu_342_p1;

assign source_2_address0 = zext_ln2095_fu_342_p1;

assign source_3_address0 = zext_ln2095_fu_342_p1;

assign source_4_address0 = zext_ln2095_fu_342_p1;

assign source_5_address0 = zext_ln2095_fu_342_p1;

assign source_6_address0 = zext_ln2095_fu_342_p1;

assign source_7_address0 = zext_ln2095_fu_342_p1;

assign source_8_address0 = zext_ln2095_fu_342_p1;

assign source_9_address0 = zext_ln2095_fu_342_p1;

assign store_flag_read_read_fu_88_p2 = store_flag;

assign trunc_ln2227_fu_362_p1 = i_reg_315[7:0];

assign zext_ln2095_fu_342_p1 = i_reg_315;

assign zext_ln2227_1_fu_477_p1 = lshr_ln_fu_467_p4;

assign zext_ln2227_fu_458_p1 = shl_ln_fu_451_p3;

endmodule //hotspot_HW_buffer_store
