-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hotspot_HW_buffer_load is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    temp_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    temp_ce0 : OUT STD_LOGIC;
    temp_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    load_flag : IN STD_LOGIC_VECTOR (0 downto 0);
    dest_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_0_ce0 : OUT STD_LOGIC;
    dest_0_we0 : OUT STD_LOGIC;
    dest_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_1_ce0 : OUT STD_LOGIC;
    dest_1_we0 : OUT STD_LOGIC;
    dest_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_2_ce0 : OUT STD_LOGIC;
    dest_2_we0 : OUT STD_LOGIC;
    dest_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_3_ce0 : OUT STD_LOGIC;
    dest_3_we0 : OUT STD_LOGIC;
    dest_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_4_ce0 : OUT STD_LOGIC;
    dest_4_we0 : OUT STD_LOGIC;
    dest_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_5_ce0 : OUT STD_LOGIC;
    dest_5_we0 : OUT STD_LOGIC;
    dest_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_6_ce0 : OUT STD_LOGIC;
    dest_6_we0 : OUT STD_LOGIC;
    dest_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_7_ce0 : OUT STD_LOGIC;
    dest_7_we0 : OUT STD_LOGIC;
    dest_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_8_ce0 : OUT STD_LOGIC;
    dest_8_we0 : OUT STD_LOGIC;
    dest_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_9_ce0 : OUT STD_LOGIC;
    dest_9_we0 : OUT STD_LOGIC;
    dest_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_10_ce0 : OUT STD_LOGIC;
    dest_10_we0 : OUT STD_LOGIC;
    dest_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_11_ce0 : OUT STD_LOGIC;
    dest_11_we0 : OUT STD_LOGIC;
    dest_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_12_ce0 : OUT STD_LOGIC;
    dest_12_we0 : OUT STD_LOGIC;
    dest_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_13_ce0 : OUT STD_LOGIC;
    dest_13_we0 : OUT STD_LOGIC;
    dest_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_14_ce0 : OUT STD_LOGIC;
    dest_14_we0 : OUT STD_LOGIC;
    dest_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dest_15_ce0 : OUT STD_LOGIC;
    dest_15_we0 : OUT STD_LOGIC;
    dest_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    source : IN STD_LOGIC_VECTOR (20 downto 0) );
end;


architecture behav of hotspot_HW_buffer_load is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_375 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_375_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_375_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal load_flag_read_read_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_387_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_682 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln1842_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1842_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1842_reg_687_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1842_reg_687_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_fu_435_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln708_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_10_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_11_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_12_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_13_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_14_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_379_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1845_1_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1842_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1845_fu_399_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_403_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1845_fu_411_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1845_fu_415_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal lshr_ln_fu_420_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (load_flag_read_read_fu_148_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (load_flag_read_read_fu_148_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (load_flag_read_read_fu_148_p2 = ap_const_lv1_1))) then 
                i_reg_375 <= ap_const_lv9_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1842_reg_687 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_375 <= i_3_reg_682;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_3_reg_682 <= i_3_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_375_pp0_iter1_reg <= i_reg_375;
                icmp_ln1842_reg_687 <= icmp_ln1842_fu_393_p2;
                icmp_ln1842_reg_687_pp0_iter1_reg <= icmp_ln1842_reg_687;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_reg_375_pp0_iter2_reg <= i_reg_375_pp0_iter1_reg;
                icmp_ln1842_reg_687_pp0_iter2_reg <= icmp_ln1842_reg_687_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1842_reg_687_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_10_reg_751 <= temp_q0(383 downto 352);
                p_Result_11_reg_756 <= temp_q0(415 downto 384);
                p_Result_12_reg_761 <= temp_q0(447 downto 416);
                p_Result_13_reg_766 <= temp_q0(479 downto 448);
                p_Result_14_reg_771 <= temp_q0(511 downto 480);
                p_Result_1_reg_701 <= temp_q0(63 downto 32);
                p_Result_2_reg_706 <= temp_q0(95 downto 64);
                p_Result_3_reg_711 <= temp_q0(127 downto 96);
                p_Result_4_reg_716 <= temp_q0(159 downto 128);
                p_Result_5_reg_721 <= temp_q0(191 downto 160);
                p_Result_6_reg_726 <= temp_q0(223 downto 192);
                p_Result_7_reg_731 <= temp_q0(255 downto 224);
                p_Result_8_reg_736 <= temp_q0(287 downto 256);
                p_Result_9_reg_741 <= temp_q0(319 downto 288);
                p_Result_s_reg_746 <= temp_q0(351 downto 320);
                trunc_ln708_reg_696 <= trunc_ln708_fu_435_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, load_flag_read_read_fu_148_p2, ap_enable_reg_pp0_iter0, icmp_ln1842_fu_393_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (load_flag_read_read_fu_148_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (load_flag_read_read_fu_148_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln1842_fu_393_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln1842_fu_393_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln1845_fu_415_p2 <= std_logic_vector(unsigned(zext_ln1845_fu_411_p1) + unsigned(source));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln1842_fu_393_p2)
    begin
        if ((icmp_ln1842_fu_393_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_379_p4_assign_proc : process(i_reg_375, ap_CS_fsm_pp0_stage0, i_3_reg_682, icmp_ln1842_reg_687, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1842_reg_687 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_379_p4 <= i_3_reg_682;
        else 
            ap_phi_mux_i_phi_fu_379_p4 <= i_reg_375;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dest_0_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_0_ce0 <= ap_const_logic_1;
        else 
            dest_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_0_d0 <= trunc_ln708_reg_696;

    dest_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_0_we0 <= ap_const_logic_1;
        else 
            dest_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_10_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_10_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_10_ce0 <= ap_const_logic_1;
        else 
            dest_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_10_d0 <= p_Result_s_reg_746;

    dest_10_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_10_we0 <= ap_const_logic_1;
        else 
            dest_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_11_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_11_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_11_ce0 <= ap_const_logic_1;
        else 
            dest_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_11_d0 <= p_Result_10_reg_751;

    dest_11_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_11_we0 <= ap_const_logic_1;
        else 
            dest_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_12_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_12_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_12_ce0 <= ap_const_logic_1;
        else 
            dest_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_12_d0 <= p_Result_11_reg_756;

    dest_12_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_12_we0 <= ap_const_logic_1;
        else 
            dest_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_13_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_13_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_13_ce0 <= ap_const_logic_1;
        else 
            dest_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_13_d0 <= p_Result_12_reg_761;

    dest_13_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_13_we0 <= ap_const_logic_1;
        else 
            dest_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_14_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_14_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_14_ce0 <= ap_const_logic_1;
        else 
            dest_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_14_d0 <= p_Result_13_reg_766;

    dest_14_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_14_we0 <= ap_const_logic_1;
        else 
            dest_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_15_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_15_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_15_ce0 <= ap_const_logic_1;
        else 
            dest_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_15_d0 <= p_Result_14_reg_771;

    dest_15_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_15_we0 <= ap_const_logic_1;
        else 
            dest_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_1_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_1_ce0 <= ap_const_logic_1;
        else 
            dest_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_1_d0 <= p_Result_1_reg_701;

    dest_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_1_we0 <= ap_const_logic_1;
        else 
            dest_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_2_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_2_ce0 <= ap_const_logic_1;
        else 
            dest_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_2_d0 <= p_Result_2_reg_706;

    dest_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_2_we0 <= ap_const_logic_1;
        else 
            dest_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_3_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_3_ce0 <= ap_const_logic_1;
        else 
            dest_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_3_d0 <= p_Result_3_reg_711;

    dest_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_3_we0 <= ap_const_logic_1;
        else 
            dest_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_4_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_4_ce0 <= ap_const_logic_1;
        else 
            dest_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_4_d0 <= p_Result_4_reg_716;

    dest_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_4_we0 <= ap_const_logic_1;
        else 
            dest_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_5_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_5_ce0 <= ap_const_logic_1;
        else 
            dest_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_5_d0 <= p_Result_5_reg_721;

    dest_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_5_we0 <= ap_const_logic_1;
        else 
            dest_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_6_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_6_ce0 <= ap_const_logic_1;
        else 
            dest_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_6_d0 <= p_Result_6_reg_726;

    dest_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_6_we0 <= ap_const_logic_1;
        else 
            dest_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_7_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_7_ce0 <= ap_const_logic_1;
        else 
            dest_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_7_d0 <= p_Result_7_reg_731;

    dest_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_7_we0 <= ap_const_logic_1;
        else 
            dest_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_8_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_8_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_8_ce0 <= ap_const_logic_1;
        else 
            dest_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_8_d0 <= p_Result_8_reg_736;

    dest_8_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_8_we0 <= ap_const_logic_1;
        else 
            dest_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_9_address0 <= zext_ln1842_fu_589_p1(8 - 1 downto 0);

    dest_9_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_9_ce0 <= ap_const_logic_1;
        else 
            dest_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_9_d0 <= p_Result_9_reg_741;

    dest_9_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1842_reg_687_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1842_reg_687_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dest_9_we0 <= ap_const_logic_1;
        else 
            dest_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_387_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_379_p4) + unsigned(ap_const_lv9_1));
    icmp_ln1842_fu_393_p2 <= "1" when (ap_phi_mux_i_phi_fu_379_p4 = ap_const_lv9_100) else "0";
    load_flag_read_read_fu_148_p2 <= load_flag;
    lshr_ln_fu_420_p4 <= add_ln1845_fu_415_p2(20 downto 6);
    shl_ln_fu_403_p3 <= (trunc_ln1845_fu_399_p1 & ap_const_lv6_0);
    temp_address0 <= zext_ln1845_1_fu_430_p1(15 - 1 downto 0);

    temp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1845_fu_399_p1 <= ap_phi_mux_i_phi_fu_379_p4(8 - 1 downto 0);
    trunc_ln708_fu_435_p1 <= temp_q0(32 - 1 downto 0);
    zext_ln1842_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_375_pp0_iter2_reg),64));
    zext_ln1845_1_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_420_p4),64));
    zext_ln1845_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_403_p3),21));
end behav;
