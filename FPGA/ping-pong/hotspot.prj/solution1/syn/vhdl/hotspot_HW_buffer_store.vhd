-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hotspot_HW_buffer_store is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    result_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_we0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    store_flag : IN STD_LOGIC_VECTOR (0 downto 0);
    dest : IN STD_LOGIC_VECTOR (19 downto 0);
    source_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_0_ce0 : OUT STD_LOGIC;
    source_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_1_ce0 : OUT STD_LOGIC;
    source_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_2_ce0 : OUT STD_LOGIC;
    source_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_3_ce0 : OUT STD_LOGIC;
    source_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_4_ce0 : OUT STD_LOGIC;
    source_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_5_ce0 : OUT STD_LOGIC;
    source_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_6_ce0 : OUT STD_LOGIC;
    source_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_7_ce0 : OUT STD_LOGIC;
    source_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_8_ce0 : OUT STD_LOGIC;
    source_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_9_ce0 : OUT STD_LOGIC;
    source_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_10_ce0 : OUT STD_LOGIC;
    source_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_11_ce0 : OUT STD_LOGIC;
    source_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_12_ce0 : OUT STD_LOGIC;
    source_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_13_ce0 : OUT STD_LOGIC;
    source_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_14_ce0 : OUT STD_LOGIC;
    source_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    source_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    source_15_ce0 : OUT STD_LOGIC;
    source_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hotspot_HW_buffer_store is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_315 : STD_LOGIC_VECTOR (8 downto 0);
    signal store_flag_read_read_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dest_cast_fu_326_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal dest_cast_reg_486 : STD_LOGIC_VECTOR (20 downto 0);
    signal i_2_fu_330_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln2095_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2095_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2095_reg_496_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2227_fu_362_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2227_reg_580 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2227_reg_580_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal source_0_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_1_load_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_2_load_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_3_load_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_4_load_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_5_load_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_6_load_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_7_load_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_8_load_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_9_load_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_10_load_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_11_load_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_12_load_reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_13_load_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_14_load_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal source_15_load_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal zext_ln2095_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln2227_1_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln2101_15_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_14_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_13_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_12_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_11_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_10_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_9_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_8_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_7_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_6_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_5_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_4_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_3_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_2_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_1_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2101_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_451_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln2227_fu_458_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln2227_fu_462_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal lshr_ln_fu_467_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (store_flag_read_read_fu_88_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (store_flag_read_read_fu_88_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (store_flag_read_read_fu_88_p2 = ap_const_lv1_1))) then 
                i_reg_315 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2095_fu_336_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_reg_315 <= i_2_fu_330_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                dest_cast_reg_486 <= dest_cast_fu_326_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln2095_reg_496 <= icmp_ln2095_fu_336_p2;
                icmp_ln2095_reg_496_pp0_iter1_reg <= icmp_ln2095_reg_496;
                trunc_ln2227_reg_580_pp0_iter1_reg <= trunc_ln2227_reg_580;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2095_reg_496 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                source_0_load_reg_585 <= source_0_q0;
                source_10_load_reg_635 <= source_10_q0;
                source_11_load_reg_640 <= source_11_q0;
                source_12_load_reg_645 <= source_12_q0;
                source_13_load_reg_650 <= source_13_q0;
                source_14_load_reg_655 <= source_14_q0;
                source_15_load_reg_660 <= source_15_q0;
                source_1_load_reg_590 <= source_1_q0;
                source_2_load_reg_595 <= source_2_q0;
                source_3_load_reg_600 <= source_3_q0;
                source_4_load_reg_605 <= source_4_q0;
                source_5_load_reg_610 <= source_5_q0;
                source_6_load_reg_615 <= source_6_q0;
                source_7_load_reg_620 <= source_7_q0;
                source_8_load_reg_625 <= source_8_q0;
                source_9_load_reg_630 <= source_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2095_fu_336_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln2227_reg_580 <= trunc_ln2227_fu_362_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, store_flag_read_read_fu_88_p2, ap_enable_reg_pp0_iter0, icmp_ln2095_fu_336_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (store_flag_read_read_fu_88_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (store_flag_read_read_fu_88_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln2095_fu_336_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln2095_fu_336_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln2227_fu_462_p2 <= std_logic_vector(unsigned(zext_ln2227_fu_458_p1) + unsigned(dest_cast_reg_486));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln2095_fu_336_p2)
    begin
        if ((icmp_ln2095_fu_336_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln2101_10_fu_396_p1 <= source_10_load_reg_635;
    bitcast_ln2101_11_fu_399_p1 <= source_11_load_reg_640;
    bitcast_ln2101_12_fu_402_p1 <= source_12_load_reg_645;
    bitcast_ln2101_13_fu_405_p1 <= source_13_load_reg_650;
    bitcast_ln2101_14_fu_408_p1 <= source_14_load_reg_655;
    bitcast_ln2101_15_fu_411_p1 <= source_15_load_reg_660;
    bitcast_ln2101_1_fu_369_p1 <= source_1_load_reg_590;
    bitcast_ln2101_2_fu_372_p1 <= source_2_load_reg_595;
    bitcast_ln2101_3_fu_375_p1 <= source_3_load_reg_600;
    bitcast_ln2101_4_fu_378_p1 <= source_4_load_reg_605;
    bitcast_ln2101_5_fu_381_p1 <= source_5_load_reg_610;
    bitcast_ln2101_6_fu_384_p1 <= source_6_load_reg_615;
    bitcast_ln2101_7_fu_387_p1 <= source_7_load_reg_620;
    bitcast_ln2101_8_fu_390_p1 <= source_8_load_reg_625;
    bitcast_ln2101_9_fu_393_p1 <= source_9_load_reg_630;
    bitcast_ln2101_fu_366_p1 <= source_0_load_reg_585;
        dest_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dest),21));

    i_2_fu_330_p2 <= std_logic_vector(unsigned(i_reg_315) + unsigned(ap_const_lv9_1));
    icmp_ln2095_fu_336_p2 <= "1" when (i_reg_315 = ap_const_lv9_100) else "0";
    lshr_ln_fu_467_p4 <= add_ln2227_fu_462_p2(20 downto 6);
    result_address0 <= zext_ln2227_1_fu_477_p1(15 - 1 downto 0);

    result_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= (((((((((((((((bitcast_ln2101_15_fu_411_p1 & bitcast_ln2101_14_fu_408_p1) & bitcast_ln2101_13_fu_405_p1) & bitcast_ln2101_12_fu_402_p1) & bitcast_ln2101_11_fu_399_p1) & bitcast_ln2101_10_fu_396_p1) & bitcast_ln2101_9_fu_393_p1) & bitcast_ln2101_8_fu_390_p1) & bitcast_ln2101_7_fu_387_p1) & bitcast_ln2101_6_fu_384_p1) & bitcast_ln2101_5_fu_381_p1) & bitcast_ln2101_4_fu_378_p1) & bitcast_ln2101_3_fu_375_p1) & bitcast_ln2101_2_fu_372_p1) & bitcast_ln2101_1_fu_369_p1) & bitcast_ln2101_fu_366_p1);

    result_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln2095_reg_496_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln2095_reg_496_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_451_p3 <= (trunc_ln2227_reg_580_pp0_iter1_reg & ap_const_lv6_0);
    source_0_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_0_ce0 <= ap_const_logic_1;
        else 
            source_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_10_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_10_ce0 <= ap_const_logic_1;
        else 
            source_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_11_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_11_ce0 <= ap_const_logic_1;
        else 
            source_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_12_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_12_ce0 <= ap_const_logic_1;
        else 
            source_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_13_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_13_ce0 <= ap_const_logic_1;
        else 
            source_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_14_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_14_ce0 <= ap_const_logic_1;
        else 
            source_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_15_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_15_ce0 <= ap_const_logic_1;
        else 
            source_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_1_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_1_ce0 <= ap_const_logic_1;
        else 
            source_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_2_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_2_ce0 <= ap_const_logic_1;
        else 
            source_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_3_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_3_ce0 <= ap_const_logic_1;
        else 
            source_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_4_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_4_ce0 <= ap_const_logic_1;
        else 
            source_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_5_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_5_ce0 <= ap_const_logic_1;
        else 
            source_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_6_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_6_ce0 <= ap_const_logic_1;
        else 
            source_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_7_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_7_ce0 <= ap_const_logic_1;
        else 
            source_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_8_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_8_ce0 <= ap_const_logic_1;
        else 
            source_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    source_9_address0 <= zext_ln2095_fu_342_p1(8 - 1 downto 0);

    source_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            source_9_ce0 <= ap_const_logic_1;
        else 
            source_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    store_flag_read_read_fu_88_p2 <= store_flag;
    trunc_ln2227_fu_362_p1 <= i_reg_315(8 - 1 downto 0);
    zext_ln2095_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_315),64));
    zext_ln2227_1_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_467_p4),64));
    zext_ln2227_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_451_p3),21));
end behav;
