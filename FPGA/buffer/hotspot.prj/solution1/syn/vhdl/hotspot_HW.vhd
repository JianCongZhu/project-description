-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hotspot_HW is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    result : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_ap_vld : OUT STD_LOGIC;
    temp_i : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_o_ap_vld : OUT STD_LOGIC;
    power : IN STD_LOGIC_VECTOR (31 downto 0);
    Cap : IN STD_LOGIC_VECTOR (31 downto 0);
    Rx : IN STD_LOGIC_VECTOR (31 downto 0);
    Ry : IN STD_LOGIC_VECTOR (31 downto 0);
    Rz : IN STD_LOGIC_VECTOR (31 downto 0);
    dt : IN STD_LOGIC_VECTOR (31 downto 0);
    amb_temp : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hotspot_HW is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hotspot_HW_hotspot_HW,hls_ip_2020_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.430900,HLS_SYN_LAT=262837560,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5765,HLS_SYN_LUT=4795,HLS_VERSION=2020_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp10_stage0 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (104 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (104 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (104 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (104 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (104 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (104 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (104 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (104 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (104 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (104 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (104 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp21_stage0 : STD_LOGIC_VECTOR (104 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (104 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4008000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1F4 : STD_LOGIC_VECTOR (8 downto 0) := "111110100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (104 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal loop_index40_reg_555 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_phi26_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_34_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_35_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index_reg_810 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_867_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_892 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_862_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_898 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal cw_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cs_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv4_reg_1382 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_872_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul5_reg_1387 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_853_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cc_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_905_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_909_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_1408 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal empty_10_fu_921_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_10_reg_1416 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln140_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln142_fu_925_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln142_reg_1423 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal icmp_ln142_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln146_fu_937_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_20_fu_941_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal empty_22_fu_958_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal empty_24_fu_975_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal empty_14_fu_992_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal empty_16_fu_1009_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal empty_18_fu_1026_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal empty_26_fu_1043_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal empty_28_fu_1060_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal empty_30_fu_1077_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal empty_32_fu_1094_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal empty_36_fu_1111_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp10_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp10_stage0 : signal is "none";
    signal ap_enable_reg_pp10_iter0 : STD_LOGIC := '0';
    signal ap_block_state82_pp10_stage0_iter0 : BOOLEAN;
    signal ap_block_state83_pp10_stage0_iter1 : BOOLEAN;
    signal ap_block_pp10_stage0_11001 : BOOLEAN;
    signal exitcond8525_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8525_reg_1521 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp10_iter1 : STD_LOGIC := '0';
    signal add_ln173_fu_1133_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln173_reg_1537 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal icmp_ln173_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln177_fu_1145_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln177_reg_1546 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_49_fu_1149_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal empty_51_fu_1166_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal empty_53_fu_1183_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal empty_43_fu_1200_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal empty_45_fu_1217_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal empty_47_fu_1234_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal empty_55_fu_1251_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal empty_57_fu_1268_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal empty_59_fu_1285_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal empty_64_fu_1302_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal empty_66_fu_1319_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp21_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp21_stage0 : signal is "none";
    signal ap_enable_reg_pp21_iter0 : STD_LOGIC := '0';
    signal ap_block_state105_pp21_stage0_iter0 : BOOLEAN;
    signal ap_block_state106_pp21_stage0_iter1 : BOOLEAN;
    signal ap_block_pp21_stage0_11001 : BOOLEAN;
    signal exitcond10341_fu_1325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond10341_reg_1635 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal grp_compute_fu_821_ap_ready : STD_LOGIC;
    signal grp_compute_fu_821_ap_done : STD_LOGIC;
    signal ap_block_pp10_stage0_subdone : BOOLEAN;
    signal ap_condition_pp10_flush_enable : STD_LOGIC;
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_block_pp21_stage0_subdone : BOOLEAN;
    signal ap_condition_pp21_exit_iter0_state105 : STD_LOGIC;
    signal ap_enable_reg_pp21_iter1 : STD_LOGIC := '0';
    signal top_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal top_buf_ce0 : STD_LOGIC;
    signal top_buf_we0 : STD_LOGIC;
    signal top_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal top_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal center_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal center_buf_ce0 : STD_LOGIC;
    signal center_buf_we0 : STD_LOGIC;
    signal center_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal center_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal center_buf_ce1 : STD_LOGIC;
    signal center_buf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bottom_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal bottom_buf_ce0 : STD_LOGIC;
    signal bottom_buf_we0 : STD_LOGIC;
    signal bottom_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bottom_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal power_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal power_buf_ce0 : STD_LOGIC;
    signal power_buf_we0 : STD_LOGIC;
    signal power_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal power_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal result_buf_ce0 : STD_LOGIC;
    signal result_buf_we0 : STD_LOGIC;
    signal grp_compute_fu_821_ap_start : STD_LOGIC;
    signal grp_compute_fu_821_ap_idle : STD_LOGIC;
    signal grp_compute_fu_821_result_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute_fu_821_result_buf_ce0 : STD_LOGIC;
    signal grp_compute_fu_821_result_buf_we0 : STD_LOGIC;
    signal grp_compute_fu_821_result_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_fu_821_center_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute_fu_821_center_buf_ce0 : STD_LOGIC;
    signal grp_compute_fu_821_center_buf_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute_fu_821_center_buf_ce1 : STD_LOGIC;
    signal grp_compute_fu_821_top_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute_fu_821_top_buf_ce0 : STD_LOGIC;
    signal grp_compute_fu_821_bottom_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute_fu_821_bottom_buf_ce0 : STD_LOGIC;
    signal grp_compute_fu_821_power_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute_fu_821_power_buf_ce0 : STD_LOGIC;
    signal i_reg_359 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_370 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal p_lcssa9_phi_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_11_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_12_reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_phi24_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lcssa7_phi_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index61_reg_433 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond12_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index58_reg_444 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond7613_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal loop_index55_reg_455 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond7714_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal loop_index70_reg_466 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond7815_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index67_reg_477 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond7917_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal loop_index64_reg_488 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond8018_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal loop_index52_reg_499 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond8119_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index49_reg_510 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond8221_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal loop_index46_reg_521 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond8322_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal loop_index43_reg_532 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal exitcond8423_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_61_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_39_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal empty_62_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_40_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_63_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_41_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_641 : STD_LOGIC_VECTOR (3 downto 0);
    signal loop_index28_reg_652 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond9329_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index25_reg_663 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond9431_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal loop_index22_reg_674 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond9532_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal loop_index37_reg_733 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond9633_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index34_reg_744 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond9735_fu_1223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal loop_index31_reg_755 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond9836_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal loop_index19_reg_766 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond9937_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index16_reg_777 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond10038_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal loop_index13_reg_788 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond10139_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal loop_index10_reg_799 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond10240_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compute_fu_821_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal loop_index61_cast_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index58_cast_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index55_cast_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index70_cast_fu_1004_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index67_cast_fu_1021_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index64_cast_fu_1038_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index52_cast_fu_1055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index49_cast_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index46_cast_fu_1089_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index43_cast_fu_1106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index40_cast_fu_1123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp10_stage0 : BOOLEAN;
    signal loop_index28_cast_fu_1161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index25_cast_fu_1178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index22_cast_fu_1195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index37_cast_fu_1212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index34_cast_fu_1229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index31_cast_fu_1246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index19_cast_fu_1263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index16_cast_fu_1280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index13_cast_fu_1297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index10_cast_fu_1314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_cast_fu_1331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp21_stage0 : BOOLEAN;
    signal ap_block_pp10_stage0_01001 : BOOLEAN;
    signal empty_68_fu_1336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp21_stage0_01001 : BOOLEAN;
    signal grp_fu_840_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_840_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_856_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_862_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_862_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (104 downto 0);
    signal ap_idle_pp10 : STD_LOGIC;
    signal ap_enable_pp10 : STD_LOGIC;
    signal ap_idle_pp21 : STD_LOGIC;
    signal ap_enable_pp21 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hotspot_HW_compute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        result_buf_ce0 : OUT STD_LOGIC;
        result_buf_we0 : OUT STD_LOGIC;
        result_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        center_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        center_buf_ce0 : OUT STD_LOGIC;
        center_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        center_buf_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        center_buf_ce1 : OUT STD_LOGIC;
        center_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        top_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        top_buf_ce0 : OUT STD_LOGIC;
        top_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bottom_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        bottom_buf_ce0 : OUT STD_LOGIC;
        bottom_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        power_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        power_buf_ce0 : OUT STD_LOGIC;
        power_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cc : IN STD_LOGIC_VECTOR (31 downto 0);
        cn : IN STD_LOGIC_VECTOR (31 downto 0);
        cs : IN STD_LOGIC_VECTOR (31 downto 0);
        ce_r : IN STD_LOGIC_VECTOR (31 downto 0);
        cw : IN STD_LOGIC_VECTOR (31 downto 0);
        ct : IN STD_LOGIC_VECTOR (31 downto 0);
        cb : IN STD_LOGIC_VECTOR (31 downto 0);
        Cap : IN STD_LOGIC_VECTOR (31 downto 0);
        dt : IN STD_LOGIC_VECTOR (31 downto 0);
        amb_temp : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hotspot_HW_fdiv_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hotspot_HW_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hotspot_HW_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hotspot_HW_dadddsub_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hotspot_HW_dmul_64ns_64ns_64_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hotspot_HW_top_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hotspot_HW_center_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    top_buf_U : component hotspot_HW_top_buf
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => top_buf_address0,
        ce0 => top_buf_ce0,
        we0 => top_buf_we0,
        d0 => top_buf_d0,
        q0 => top_buf_q0);

    center_buf_U : component hotspot_HW_center_buf
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => center_buf_address0,
        ce0 => center_buf_ce0,
        we0 => center_buf_we0,
        d0 => center_buf_d0,
        q0 => center_buf_q0,
        address1 => grp_compute_fu_821_center_buf_address1,
        ce1 => center_buf_ce1,
        q1 => center_buf_q1);

    bottom_buf_U : component hotspot_HW_top_buf
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bottom_buf_address0,
        ce0 => bottom_buf_ce0,
        we0 => bottom_buf_we0,
        d0 => bottom_buf_d0,
        q0 => bottom_buf_q0);

    power_buf_U : component hotspot_HW_top_buf
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => power_buf_address0,
        ce0 => power_buf_ce0,
        we0 => power_buf_we0,
        d0 => power_buf_d0,
        q0 => power_buf_q0);

    result_buf_U : component hotspot_HW_top_buf
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_buf_address0,
        ce0 => result_buf_ce0,
        we0 => result_buf_we0,
        d0 => grp_compute_fu_821_result_buf_d0,
        q0 => result_buf_q0);

    grp_compute_fu_821 : component hotspot_HW_compute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_fu_821_ap_start,
        ap_done => grp_compute_fu_821_ap_done,
        ap_idle => grp_compute_fu_821_ap_idle,
        ap_ready => grp_compute_fu_821_ap_ready,
        result_buf_address0 => grp_compute_fu_821_result_buf_address0,
        result_buf_ce0 => grp_compute_fu_821_result_buf_ce0,
        result_buf_we0 => grp_compute_fu_821_result_buf_we0,
        result_buf_d0 => grp_compute_fu_821_result_buf_d0,
        center_buf_address0 => grp_compute_fu_821_center_buf_address0,
        center_buf_ce0 => grp_compute_fu_821_center_buf_ce0,
        center_buf_q0 => center_buf_q0,
        center_buf_address1 => grp_compute_fu_821_center_buf_address1,
        center_buf_ce1 => grp_compute_fu_821_center_buf_ce1,
        center_buf_q1 => center_buf_q1,
        top_buf_address0 => grp_compute_fu_821_top_buf_address0,
        top_buf_ce0 => grp_compute_fu_821_top_buf_ce0,
        top_buf_q0 => top_buf_q0,
        bottom_buf_address0 => grp_compute_fu_821_bottom_buf_address0,
        bottom_buf_ce0 => grp_compute_fu_821_bottom_buf_ce0,
        bottom_buf_q0 => bottom_buf_q0,
        power_buf_address0 => grp_compute_fu_821_power_buf_address0,
        power_buf_ce0 => grp_compute_fu_821_power_buf_ce0,
        power_buf_q0 => power_buf_q0,
        cc => cc_reg_1397,
        cn => cs_reg_1375,
        cs => cs_reg_1375,
        ce_r => cw_reg_1368,
        cw => cw_reg_1368,
        ct => reg_878,
        cb => reg_878,
        Cap => Cap,
        dt => dt,
        amb_temp => amb_temp);

    fdiv_32ns_32ns_32_12_no_dsp_1_U26 : component hotspot_HW_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_840_p0,
        din1 => grp_fu_840_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_840_p2);

    fdiv_32ns_32ns_32_12_no_dsp_1_U27 : component hotspot_HW_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_878,
        din1 => Ry,
        ce => ap_const_logic_1,
        dout => grp_fu_847_p2);

    fptrunc_64ns_32_2_no_dsp_1_U28 : component hotspot_HW_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_898,
        ce => ap_const_logic_1,
        dout => grp_fu_853_p1);

    fpext_32ns_64_2_no_dsp_1_U29 : component hotspot_HW_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_856_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_856_p1);

    fpext_32ns_64_2_no_dsp_1_U30 : component hotspot_HW_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cs_reg_1375,
        ce => ap_const_logic_1,
        dout => grp_fu_859_p1);

    dadddsub_64ns_64ns_64_8_full_dsp_1_U31 : component hotspot_HW_dadddsub_64ns_64ns_64_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_862_p0,
        din1 => grp_fu_862_p1,
        opcode => grp_fu_862_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_862_p2);

    dmul_64ns_64ns_64_8_max_dsp_1_U32 : component hotspot_HW_dmul_64ns_64ns_64_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_887,
        din1 => grp_fu_867_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_867_p2);

    dmul_64ns_64ns_64_8_max_dsp_1_U33 : component hotspot_HW_dmul_64ns_64ns_64_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv4_reg_1382,
        din1 => ap_const_lv64_4000000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_872_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp10_flush_enable)) then 
                    ap_enable_reg_pp10_iter0 <= ap_const_logic_0;
                elsif (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                    ap_enable_reg_pp10_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp10_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp10_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp10_stage0_subdone)) then 
                    ap_enable_reg_pp10_iter1 <= ap_enable_reg_pp10_iter0;
                elsif (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                    ap_enable_reg_pp10_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp21_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp21_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp21_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp21_exit_iter0_state105) and (ap_const_logic_1 = ap_CS_fsm_pp21_stage0))) then 
                    ap_enable_reg_pp21_iter0 <= ap_const_logic_0;
                elsif (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                    ap_enable_reg_pp21_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp21_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp21_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp21_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp21_exit_iter0_state105))) then 
                    ap_enable_reg_pp21_iter1 <= (ap_const_logic_1 xor ap_condition_pp21_exit_iter0_state105);
                elsif ((ap_const_boolean_0 = ap_block_pp21_stage0_subdone)) then 
                    ap_enable_reg_pp21_iter1 <= ap_enable_reg_pp21_iter0;
                elsif (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                    ap_enable_reg_pp21_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_fu_821_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_fu_821_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                    grp_compute_fu_821_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_fu_821_ap_ready = ap_const_logic_1)) then 
                    grp_compute_fu_821_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_34_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp10_iter1 = ap_const_logic_1) and (exitcond8525_reg_1521 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then 
                empty_34_reg_578 <= result_buf_q0;
            elsif (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                empty_34_reg_578 <= empty_11_reg_396;
            end if; 
        end if;
    end process;

    empty_35_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp10_iter1 = ap_const_logic_1) and (exitcond8525_reg_1521 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then 
                empty_35_reg_590 <= result_buf_q0;
            elsif (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                empty_35_reg_590 <= empty_12_reg_408;
            end if; 
        end if;
    end process;

    empty_39_reg_602_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_fu_931_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                empty_39_reg_602 <= empty_11_reg_396;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
                empty_39_reg_602 <= empty_61_reg_685;
            end if; 
        end if;
    end process;

    empty_40_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_fu_931_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                empty_40_reg_613 <= empty_12_reg_408;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
                empty_40_reg_613 <= empty_62_reg_701;
            end if; 
        end if;
    end process;

    empty_41_reg_627_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_fu_931_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                empty_41_reg_627 <= empty_11_reg_396;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
                empty_41_reg_627 <= empty_63_reg_717;
            end if; 
        end if;
    end process;

    empty_61_reg_685_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln177_reg_1546 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state91)) or ((trunc_ln177_reg_1546 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state91)))) then 
                empty_61_reg_685 <= empty_39_reg_602;
            elsif ((not((trunc_ln177_reg_1546 = ap_const_lv3_7)) and not((trunc_ln177_reg_1546 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state91))) then 
                empty_61_reg_685 <= empty_11_reg_396;
            end if; 
        end if;
    end process;

    empty_62_reg_701_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln177_reg_1546 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state91)) or ((trunc_ln177_reg_1546 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state91)))) then 
                empty_62_reg_701 <= empty_40_reg_613;
            elsif ((not((trunc_ln177_reg_1546 = ap_const_lv3_7)) and not((trunc_ln177_reg_1546 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state91))) then 
                empty_62_reg_701 <= empty_12_reg_408;
            end if; 
        end if;
    end process;

    empty_63_reg_717_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                if ((trunc_ln177_reg_1546 = ap_const_lv3_0)) then 
                    empty_63_reg_717 <= empty_39_reg_602;
                elsif ((trunc_ln177_reg_1546 = ap_const_lv3_7)) then 
                    empty_63_reg_717 <= empty_41_reg_627;
                elsif ((not((trunc_ln177_reg_1546 = ap_const_lv3_7)) and not((trunc_ln177_reg_1546 = ap_const_lv3_0)))) then 
                    empty_63_reg_717 <= empty_11_reg_396;
                end if;
            end if; 
        end if;
    end process;

    i_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln173_fu_1139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                i_reg_359 <= i_1_reg_1408;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                i_reg_359 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_1_reg_641_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_fu_931_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                j_1_reg_641 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
                j_1_reg_641 <= add_ln173_reg_1537;
            end if; 
        end if;
    end process;

    j_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                j_reg_370 <= add_ln142_reg_1423;
            elsif (((icmp_ln140_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                j_reg_370 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    loop_index10_reg_799_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10240_fu_1308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                loop_index10_reg_799 <= empty_64_fu_1302_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                loop_index10_reg_799 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    loop_index13_reg_788_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                loop_index13_reg_788 <= ap_const_lv13_0;
            elsif (((exitcond10139_fu_1291_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
                loop_index13_reg_788 <= empty_59_fu_1285_p2;
            end if; 
        end if;
    end process;

    loop_index16_reg_777_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                loop_index16_reg_777 <= ap_const_lv13_0;
            elsif (((exitcond10038_fu_1274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                loop_index16_reg_777 <= empty_57_fu_1268_p2;
            end if; 
        end if;
    end process;

    loop_index19_reg_766_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln177_fu_1145_p1 = ap_const_lv3_0)) and not((trunc_ln177_fu_1145_p1 = ap_const_lv3_7)) and (icmp_ln173_fu_1139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                loop_index19_reg_766 <= ap_const_lv13_0;
            elsif (((exitcond9937_fu_1257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                loop_index19_reg_766 <= empty_55_fu_1251_p2;
            end if; 
        end if;
    end process;

    loop_index22_reg_674_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
                loop_index22_reg_674 <= ap_const_lv13_0;
            elsif (((exitcond9532_fu_1189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                loop_index22_reg_674 <= empty_53_fu_1183_p2;
            end if; 
        end if;
    end process;

    loop_index25_reg_663_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                loop_index25_reg_663 <= ap_const_lv13_0;
            elsif (((exitcond9431_fu_1172_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                loop_index25_reg_663 <= empty_51_fu_1166_p2;
            end if; 
        end if;
    end process;

    loop_index28_reg_652_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln177_fu_1145_p1 = ap_const_lv3_7) and (icmp_ln173_fu_1139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                loop_index28_reg_652 <= ap_const_lv13_0;
            elsif (((exitcond9329_fu_1155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
                loop_index28_reg_652 <= empty_49_fu_1149_p2;
            end if; 
        end if;
    end process;

    loop_index31_reg_755_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                loop_index31_reg_755 <= ap_const_lv13_0;
            elsif (((exitcond9836_fu_1240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                loop_index31_reg_755 <= empty_47_fu_1234_p2;
            end if; 
        end if;
    end process;

    loop_index34_reg_744_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                loop_index34_reg_744 <= ap_const_lv13_0;
            elsif (((exitcond9735_fu_1223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                loop_index34_reg_744 <= empty_45_fu_1217_p2;
            end if; 
        end if;
    end process;

    loop_index37_reg_733_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln177_fu_1145_p1 = ap_const_lv3_0) and (icmp_ln173_fu_1139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                loop_index37_reg_733 <= ap_const_lv13_0;
            elsif (((exitcond9633_fu_1206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                loop_index37_reg_733 <= empty_43_fu_1200_p2;
            end if; 
        end if;
    end process;

    loop_index40_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8525_fu_1117_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then 
                loop_index40_reg_555 <= empty_36_fu_1111_p2;
            elsif (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                loop_index40_reg_555 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    loop_index43_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8423_fu_1100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                loop_index43_reg_532 <= empty_32_fu_1094_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                loop_index43_reg_532 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    loop_index46_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                loop_index46_reg_521 <= ap_const_lv13_0;
            elsif (((exitcond8322_fu_1083_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                loop_index46_reg_521 <= empty_30_fu_1077_p2;
            end if; 
        end if;
    end process;

    loop_index49_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                loop_index49_reg_510 <= ap_const_lv13_0;
            elsif (((exitcond8221_fu_1066_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                loop_index49_reg_510 <= empty_28_fu_1060_p2;
            end if; 
        end if;
    end process;

    loop_index52_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln146_fu_937_p1 = ap_const_lv3_0)) and not((trunc_ln146_fu_937_p1 = ap_const_lv3_7)) and (icmp_ln142_fu_931_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                loop_index52_reg_499 <= ap_const_lv13_0;
            elsif (((exitcond8119_fu_1049_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                loop_index52_reg_499 <= empty_26_fu_1043_p2;
            end if; 
        end if;
    end process;

    loop_index55_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                loop_index55_reg_455 <= ap_const_lv13_0;
            elsif (((exitcond7714_fu_981_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                loop_index55_reg_455 <= empty_24_fu_975_p2;
            end if; 
        end if;
    end process;

    loop_index58_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                loop_index58_reg_444 <= ap_const_lv13_0;
            elsif (((exitcond7613_fu_964_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                loop_index58_reg_444 <= empty_22_fu_958_p2;
            end if; 
        end if;
    end process;

    loop_index61_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln146_fu_937_p1 = ap_const_lv3_7) and (icmp_ln142_fu_931_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                loop_index61_reg_433 <= ap_const_lv13_0;
            elsif (((exitcond12_fu_947_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                loop_index61_reg_433 <= empty_20_fu_941_p2;
            end if; 
        end if;
    end process;

    loop_index64_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                loop_index64_reg_488 <= ap_const_lv13_0;
            elsif (((exitcond8018_fu_1032_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                loop_index64_reg_488 <= empty_18_fu_1026_p2;
            end if; 
        end if;
    end process;

    loop_index67_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                loop_index67_reg_477 <= ap_const_lv13_0;
            elsif (((exitcond7917_fu_1015_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                loop_index67_reg_477 <= empty_16_fu_1009_p2;
            end if; 
        end if;
    end process;

    loop_index70_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln146_fu_937_p1 = ap_const_lv3_0) and (icmp_ln142_fu_931_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                loop_index70_reg_466 <= ap_const_lv13_0;
            elsif (((exitcond7815_fu_998_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                loop_index70_reg_466 <= empty_14_fu_992_p2;
            end if; 
        end if;
    end process;

    loop_index_reg_810_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10341_fu_1325_p2 = ap_const_lv1_0) and (ap_enable_reg_pp21_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp21_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp21_stage0))) then 
                loop_index_reg_810 <= empty_66_fu_1319_p2;
            elsif (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                loop_index_reg_810 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    p_phi24_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8423_fu_1100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                p_phi24_reg_543 <= empty_reg_1402;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                p_phi24_reg_543 <= p_lcssa7_phi_reg_420;
            end if; 
        end if;
    end process;

    p_phi26_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp10_iter1 = ap_const_logic_1) and (exitcond8525_reg_1521 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then 
                p_phi26_reg_566 <= result_buf_q0;
            elsif (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                p_phi26_reg_566 <= p_lcssa9_phi_reg_381;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                add_ln142_reg_1423 <= add_ln142_fu_925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                add_ln173_reg_1537 <= add_ln173_fu_1133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                cc_reg_1397 <= grp_fu_853_p1;
                empty_reg_1402 <= empty_fu_905_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                conv4_reg_1382 <= grp_fu_859_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                cs_reg_1375 <= grp_fu_847_p2;
                cw_reg_1368 <= grp_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                empty_10_reg_1416 <= empty_10_fu_921_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                empty_11_reg_396 <= empty_34_reg_578;
                empty_12_reg_408 <= empty_35_reg_590;
                p_lcssa7_phi_reg_420 <= p_phi24_reg_543;
                p_lcssa9_phi_reg_381 <= p_phi26_reg_566;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp21_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp21_stage0))) then
                exitcond10341_reg_1635 <= exitcond10341_fu_1325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then
                exitcond8525_reg_1521 <= exitcond8525_fu_1117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                i_1_reg_1408 <= i_1_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                mul5_reg_1387 <= grp_fu_872_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_878 <= grp_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_887 <= grp_fu_856_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_892 <= grp_fu_867_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state42))) then
                reg_898 <= grp_fu_862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln173_fu_1139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                trunc_ln177_reg_1546 <= trunc_ln177_fu_1145_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state61, icmp_ln140_fu_915_p2, ap_CS_fsm_state62, icmp_ln142_fu_931_p2, trunc_ln146_fu_937_p1, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_pp10_stage0, ap_enable_reg_pp10_iter0, ap_enable_reg_pp10_iter1, ap_CS_fsm_state85, icmp_ln173_fu_1139_p2, trunc_ln177_fu_1145_p1, ap_CS_fsm_state86, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_enable_reg_pp21_iter0, exitcond10341_fu_1325_p2, ap_CS_fsm_state81, grp_compute_fu_821_ap_done, ap_block_pp10_stage0_subdone, ap_CS_fsm_state104, ap_block_pp21_stage0_subdone, exitcond12_fu_947_p2, exitcond7613_fu_964_p2, exitcond7714_fu_981_p2, exitcond7815_fu_998_p2, exitcond7917_fu_1015_p2, exitcond8018_fu_1032_p2, exitcond8119_fu_1049_p2, exitcond8221_fu_1066_p2, exitcond8322_fu_1083_p2, exitcond8423_fu_1100_p2, exitcond9329_fu_1155_p2, exitcond9431_fu_1172_p2, exitcond9532_fu_1189_p2, exitcond9633_fu_1206_p2, exitcond9735_fu_1223_p2, exitcond9836_fu_1240_p2, exitcond9937_fu_1257_p2, exitcond10038_fu_1274_p2, exitcond10139_fu_1291_p2, exitcond10240_fu_1308_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((icmp_ln140_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                if (((icmp_ln142_fu_931_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                elsif ((not((trunc_ln146_fu_937_p1 = ap_const_lv3_0)) and not((trunc_ln146_fu_937_p1 = ap_const_lv3_7)) and (icmp_ln142_fu_931_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                elsif (((trunc_ln146_fu_937_p1 = ap_const_lv3_0) and (icmp_ln142_fu_931_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                if (((exitcond12_fu_947_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((exitcond7613_fu_964_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if (((exitcond7714_fu_981_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state69 => 
                if (((exitcond7815_fu_998_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((exitcond7917_fu_1015_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((exitcond8018_fu_1032_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state74 => 
                if (((exitcond8119_fu_1049_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((exitcond8221_fu_1066_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((exitcond8322_fu_1083_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state79 => 
                if (((exitcond8423_fu_1100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                if (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_pp10_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_pp10_stage0 => 
                if (not(((ap_enable_reg_pp10_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_enable_reg_pp10_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp10_stage0;
                elsif (((ap_enable_reg_pp10_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_enable_reg_pp10_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp10_stage0;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state85 => 
                if (((icmp_ln173_fu_1139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                elsif ((not((trunc_ln177_fu_1145_p1 = ap_const_lv3_0)) and not((trunc_ln177_fu_1145_p1 = ap_const_lv3_7)) and (icmp_ln173_fu_1139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                elsif (((trunc_ln177_fu_1145_p1 = ap_const_lv3_0) and (icmp_ln173_fu_1139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                if (((exitcond9329_fu_1155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((exitcond9431_fu_1172_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (((exitcond9532_fu_1189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state92 => 
                if (((exitcond9633_fu_1206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                if (((exitcond9735_fu_1223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                if (((exitcond9836_fu_1240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state97 => 
                if (((exitcond9937_fu_1257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                if (((exitcond10038_fu_1274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((exitcond10139_fu_1291_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state102 => 
                if (((exitcond10240_fu_1308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                if (((grp_compute_fu_821_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                    ap_NS_fsm <= ap_ST_fsm_pp21_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_pp21_stage0 => 
                if (not(((exitcond10341_fu_1325_p2 = ap_const_lv1_1) and (ap_enable_reg_pp21_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp21_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp21_stage0;
                elsif (((exitcond10341_fu_1325_p2 = ap_const_lv1_1) and (ap_enable_reg_pp21_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp21_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp21_stage0;
                end if;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln142_fu_925_p2 <= std_logic_vector(unsigned(j_reg_370) + unsigned(ap_const_lv4_1));
    add_ln173_fu_1133_p2 <= std_logic_vector(unsigned(j_1_reg_641) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp10_stage0 <= ap_CS_fsm(81);
    ap_CS_fsm_pp21_stage0 <= ap_CS_fsm(103);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(98);
    ap_CS_fsm_state101 <= ap_CS_fsm(99);
    ap_CS_fsm_state102 <= ap_CS_fsm(100);
    ap_CS_fsm_state103 <= ap_CS_fsm(101);
    ap_CS_fsm_state104 <= ap_CS_fsm(102);
    ap_CS_fsm_state107 <= ap_CS_fsm(104);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state84 <= ap_CS_fsm(82);
    ap_CS_fsm_state85 <= ap_CS_fsm(83);
    ap_CS_fsm_state86 <= ap_CS_fsm(84);
    ap_CS_fsm_state87 <= ap_CS_fsm(85);
    ap_CS_fsm_state88 <= ap_CS_fsm(86);
    ap_CS_fsm_state89 <= ap_CS_fsm(87);
    ap_CS_fsm_state90 <= ap_CS_fsm(88);
    ap_CS_fsm_state91 <= ap_CS_fsm(89);
    ap_CS_fsm_state92 <= ap_CS_fsm(90);
    ap_CS_fsm_state93 <= ap_CS_fsm(91);
    ap_CS_fsm_state94 <= ap_CS_fsm(92);
    ap_CS_fsm_state95 <= ap_CS_fsm(93);
    ap_CS_fsm_state96 <= ap_CS_fsm(94);
    ap_CS_fsm_state97 <= ap_CS_fsm(95);
    ap_CS_fsm_state98 <= ap_CS_fsm(96);
    ap_CS_fsm_state99 <= ap_CS_fsm(97);
        ap_block_pp10_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp10_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp10_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp10_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp21_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp21_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp21_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp21_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp21_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp21_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp10_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp10_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp10_flush_enable_assign_proc : process(ap_CS_fsm_pp10_stage0, exitcond8525_fu_1117_p2, ap_block_pp10_stage0_subdone)
    begin
        if (((exitcond8525_fu_1117_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp10_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then 
            ap_condition_pp10_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp10_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp21_exit_iter0_state105_assign_proc : process(exitcond10341_fu_1325_p2)
    begin
        if ((exitcond10341_fu_1325_p2 = ap_const_lv1_1)) then 
            ap_condition_pp21_exit_iter0_state105 <= ap_const_logic_1;
        else 
            ap_condition_pp21_exit_iter0_state105 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state61, icmp_ln140_fu_915_p2)
    begin
        if (((icmp_ln140_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp10 <= (ap_idle_pp10 xor ap_const_logic_1);
    ap_enable_pp21 <= (ap_idle_pp21 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp10_assign_proc : process(ap_enable_reg_pp10_iter0, ap_enable_reg_pp10_iter1)
    begin
        if (((ap_enable_reg_pp10_iter1 = ap_const_logic_0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_0))) then 
            ap_idle_pp10 <= ap_const_logic_1;
        else 
            ap_idle_pp10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp21_assign_proc : process(ap_enable_reg_pp21_iter0, ap_enable_reg_pp21_iter1)
    begin
        if (((ap_enable_reg_pp21_iter1 = ap_const_logic_0) and (ap_enable_reg_pp21_iter0 = ap_const_logic_0))) then 
            ap_idle_pp21 <= ap_const_logic_1;
        else 
            ap_idle_pp21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state61, icmp_ln140_fu_915_p2)
    begin
        if (((icmp_ln140_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bottom_buf_address0_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state73, ap_CS_fsm_state78, ap_CS_fsm_state90, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_bottom_buf_address0, loop_index55_cast_fu_987_p1, loop_index64_cast_fu_1038_p1, loop_index46_cast_fu_1089_p1, loop_index22_cast_fu_1195_p1, loop_index31_cast_fu_1246_p1, loop_index13_cast_fu_1297_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            bottom_buf_address0 <= loop_index13_cast_fu_1297_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            bottom_buf_address0 <= loop_index31_cast_fu_1246_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            bottom_buf_address0 <= loop_index22_cast_fu_1195_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            bottom_buf_address0 <= loop_index46_cast_fu_1089_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            bottom_buf_address0 <= loop_index64_cast_fu_1038_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            bottom_buf_address0 <= loop_index55_cast_fu_987_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            bottom_buf_address0 <= grp_compute_fu_821_bottom_buf_address0;
        else 
            bottom_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    bottom_buf_ce0_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state73, ap_CS_fsm_state78, ap_CS_fsm_state90, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_bottom_buf_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            bottom_buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            bottom_buf_ce0 <= grp_compute_fu_821_bottom_buf_ce0;
        else 
            bottom_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bottom_buf_d0_assign_proc : process(empty_10_reg_1416, ap_CS_fsm_state67, ap_CS_fsm_state73, ap_CS_fsm_state78, ap_CS_fsm_state90, ap_CS_fsm_state96, ap_CS_fsm_state101, p_lcssa9_phi_reg_381, empty_40_reg_613, empty_41_reg_627)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            bottom_buf_d0 <= p_lcssa9_phi_reg_381;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            bottom_buf_d0 <= empty_40_reg_613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            bottom_buf_d0 <= empty_41_reg_627;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            bottom_buf_d0 <= empty_10_reg_1416;
        else 
            bottom_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bottom_buf_we0_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state73, ap_CS_fsm_state78, ap_CS_fsm_state90, ap_CS_fsm_state96, ap_CS_fsm_state101, exitcond7714_fu_981_p2, exitcond8018_fu_1032_p2, exitcond8322_fu_1083_p2, exitcond9532_fu_1189_p2, exitcond9836_fu_1240_p2, exitcond10139_fu_1291_p2)
    begin
        if ((((exitcond10139_fu_1291_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101)) or ((exitcond9836_fu_1240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96)) or ((exitcond9532_fu_1189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90)) or ((exitcond8322_fu_1083_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((exitcond8018_fu_1032_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state73)) or ((exitcond7714_fu_981_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67)))) then 
            bottom_buf_we0 <= ap_const_logic_1;
        else 
            bottom_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    center_buf_address0_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_center_buf_address0, loop_index61_cast_fu_953_p1, loop_index70_cast_fu_1004_p1, loop_index52_cast_fu_1055_p1, loop_index28_cast_fu_1161_p1, loop_index37_cast_fu_1212_p1, loop_index19_cast_fu_1263_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            center_buf_address0 <= loop_index19_cast_fu_1263_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            center_buf_address0 <= loop_index37_cast_fu_1212_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            center_buf_address0 <= loop_index28_cast_fu_1161_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            center_buf_address0 <= loop_index52_cast_fu_1055_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            center_buf_address0 <= loop_index70_cast_fu_1004_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            center_buf_address0 <= loop_index61_cast_fu_953_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            center_buf_address0 <= grp_compute_fu_821_center_buf_address0;
        else 
            center_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    center_buf_ce0_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_center_buf_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            center_buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            center_buf_ce0 <= grp_compute_fu_821_center_buf_ce0;
        else 
            center_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    center_buf_ce1_assign_proc : process(ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_center_buf_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            center_buf_ce1 <= grp_compute_fu_821_center_buf_ce1;
        else 
            center_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    center_buf_d0_assign_proc : process(empty_10_reg_1416, ap_CS_fsm_state63, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state97, p_lcssa9_phi_reg_381, empty_40_reg_613, empty_41_reg_627)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            center_buf_d0 <= p_lcssa9_phi_reg_381;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            center_buf_d0 <= empty_40_reg_613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            center_buf_d0 <= empty_41_reg_627;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            center_buf_d0 <= empty_10_reg_1416;
        else 
            center_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    center_buf_we0_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state97, exitcond12_fu_947_p2, exitcond7815_fu_998_p2, exitcond8119_fu_1049_p2, exitcond9329_fu_1155_p2, exitcond9633_fu_1206_p2, exitcond9937_fu_1257_p2)
    begin
        if ((((exitcond9937_fu_1257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state97)) or ((exitcond9633_fu_1206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92)) or ((exitcond9329_fu_1155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((exitcond8119_fu_1049_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((exitcond7815_fu_998_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69)) or ((exitcond12_fu_947_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
            center_buf_we0 <= ap_const_logic_1;
        else 
            center_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_921_p1 <= temp_i;
    empty_14_fu_992_p2 <= std_logic_vector(unsigned(loop_index70_reg_466) + unsigned(ap_const_lv13_1));
    empty_16_fu_1009_p2 <= std_logic_vector(unsigned(loop_index67_reg_477) + unsigned(ap_const_lv13_1));
    empty_18_fu_1026_p2 <= std_logic_vector(unsigned(loop_index64_reg_488) + unsigned(ap_const_lv13_1));
    empty_20_fu_941_p2 <= std_logic_vector(unsigned(loop_index61_reg_433) + unsigned(ap_const_lv13_1));
    empty_22_fu_958_p2 <= std_logic_vector(unsigned(loop_index58_reg_444) + unsigned(ap_const_lv13_1));
    empty_24_fu_975_p2 <= std_logic_vector(unsigned(loop_index55_reg_455) + unsigned(ap_const_lv13_1));
    empty_26_fu_1043_p2 <= std_logic_vector(unsigned(loop_index52_reg_499) + unsigned(ap_const_lv13_1));
    empty_28_fu_1060_p2 <= std_logic_vector(unsigned(loop_index49_reg_510) + unsigned(ap_const_lv13_1));
    empty_30_fu_1077_p2 <= std_logic_vector(unsigned(loop_index46_reg_521) + unsigned(ap_const_lv13_1));
    empty_32_fu_1094_p2 <= std_logic_vector(unsigned(loop_index43_reg_532) + unsigned(ap_const_lv13_1));
    empty_36_fu_1111_p2 <= std_logic_vector(unsigned(loop_index40_reg_555) + unsigned(ap_const_lv13_1));
    empty_43_fu_1200_p2 <= std_logic_vector(unsigned(loop_index37_reg_733) + unsigned(ap_const_lv13_1));
    empty_45_fu_1217_p2 <= std_logic_vector(unsigned(loop_index34_reg_744) + unsigned(ap_const_lv13_1));
    empty_47_fu_1234_p2 <= std_logic_vector(unsigned(loop_index31_reg_755) + unsigned(ap_const_lv13_1));
    empty_49_fu_1149_p2 <= std_logic_vector(unsigned(loop_index28_reg_652) + unsigned(ap_const_lv13_1));
    empty_51_fu_1166_p2 <= std_logic_vector(unsigned(loop_index25_reg_663) + unsigned(ap_const_lv13_1));
    empty_53_fu_1183_p2 <= std_logic_vector(unsigned(loop_index22_reg_674) + unsigned(ap_const_lv13_1));
    empty_55_fu_1251_p2 <= std_logic_vector(unsigned(loop_index19_reg_766) + unsigned(ap_const_lv13_1));
    empty_57_fu_1268_p2 <= std_logic_vector(unsigned(loop_index16_reg_777) + unsigned(ap_const_lv13_1));
    empty_59_fu_1285_p2 <= std_logic_vector(unsigned(loop_index13_reg_788) + unsigned(ap_const_lv13_1));
    empty_64_fu_1302_p2 <= std_logic_vector(unsigned(loop_index10_reg_799) + unsigned(ap_const_lv13_1));
    empty_66_fu_1319_p2 <= std_logic_vector(unsigned(loop_index_reg_810) + unsigned(ap_const_lv13_1));
    empty_68_fu_1336_p1 <= result_buf_q0;
    empty_fu_905_p1 <= power;
    exitcond10038_fu_1274_p2 <= "1" when (loop_index16_reg_777 = ap_const_lv13_1000) else "0";
    exitcond10139_fu_1291_p2 <= "1" when (loop_index13_reg_788 = ap_const_lv13_1000) else "0";
    exitcond10240_fu_1308_p2 <= "1" when (loop_index10_reg_799 = ap_const_lv13_1000) else "0";
    exitcond10341_fu_1325_p2 <= "1" when (loop_index_reg_810 = ap_const_lv13_1000) else "0";
    exitcond12_fu_947_p2 <= "1" when (loop_index61_reg_433 = ap_const_lv13_1000) else "0";
    exitcond7613_fu_964_p2 <= "1" when (loop_index58_reg_444 = ap_const_lv13_1000) else "0";
    exitcond7714_fu_981_p2 <= "1" when (loop_index55_reg_455 = ap_const_lv13_1000) else "0";
    exitcond7815_fu_998_p2 <= "1" when (loop_index70_reg_466 = ap_const_lv13_1000) else "0";
    exitcond7917_fu_1015_p2 <= "1" when (loop_index67_reg_477 = ap_const_lv13_1000) else "0";
    exitcond8018_fu_1032_p2 <= "1" when (loop_index64_reg_488 = ap_const_lv13_1000) else "0";
    exitcond8119_fu_1049_p2 <= "1" when (loop_index52_reg_499 = ap_const_lv13_1000) else "0";
    exitcond8221_fu_1066_p2 <= "1" when (loop_index49_reg_510 = ap_const_lv13_1000) else "0";
    exitcond8322_fu_1083_p2 <= "1" when (loop_index46_reg_521 = ap_const_lv13_1000) else "0";
    exitcond8423_fu_1100_p2 <= "1" when (loop_index43_reg_532 = ap_const_lv13_1000) else "0";
    exitcond8525_fu_1117_p2 <= "1" when (loop_index40_reg_555 = ap_const_lv13_1000) else "0";
    exitcond9329_fu_1155_p2 <= "1" when (loop_index28_reg_652 = ap_const_lv13_1000) else "0";
    exitcond9431_fu_1172_p2 <= "1" when (loop_index25_reg_663 = ap_const_lv13_1000) else "0";
    exitcond9532_fu_1189_p2 <= "1" when (loop_index22_reg_674 = ap_const_lv13_1000) else "0";
    exitcond9633_fu_1206_p2 <= "1" when (loop_index37_reg_733 = ap_const_lv13_1000) else "0";
    exitcond9735_fu_1223_p2 <= "1" when (loop_index34_reg_744 = ap_const_lv13_1000) else "0";
    exitcond9836_fu_1240_p2 <= "1" when (loop_index31_reg_755 = ap_const_lv13_1000) else "0";
    exitcond9937_fu_1257_p2 <= "1" when (loop_index19_reg_766 = ap_const_lv13_1000) else "0";
    grp_compute_fu_821_ap_start <= grp_compute_fu_821_ap_start_reg;

    grp_fu_840_p0_assign_proc : process(ap_CS_fsm_state1, dt, reg_878, ap_CS_fsm_state13, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_840_p0 <= reg_878;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_840_p0 <= dt;
        else 
            grp_fu_840_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_840_p1_assign_proc : process(ap_CS_fsm_state1, Cap, Rx, Rz, ap_CS_fsm_state13, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_840_p1 <= Rz;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_840_p1 <= Rx;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_840_p1 <= Cap;
        else 
            grp_fu_840_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_856_p0_assign_proc : process(reg_878, cw_reg_1368, ap_CS_fsm_state25, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_856_p0 <= reg_878;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_856_p0 <= cw_reg_1368;
        else 
            grp_fu_856_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_862_opcode_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state43, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_862_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_fu_862_opcode <= ap_const_lv2_0;
        else 
            grp_fu_862_opcode <= "XX";
        end if; 
    end process;


    grp_fu_862_p0_assign_proc : process(reg_892, reg_898, ap_CS_fsm_state35, ap_CS_fsm_state43, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_862_p0 <= ap_const_lv64_3FF0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_862_p0 <= reg_898;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_862_p0 <= reg_892;
        else 
            grp_fu_862_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_862_p1_assign_proc : process(reg_892, reg_898, mul5_reg_1387, ap_CS_fsm_state35, ap_CS_fsm_state43, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_862_p1 <= reg_898;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_862_p1 <= reg_892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_862_p1 <= mul5_reg_1387;
        else 
            grp_fu_862_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_867_p1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_867_p1 <= ap_const_lv64_4008000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_867_p1 <= ap_const_lv64_4000000000000000;
        else 
            grp_fu_867_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_909_p2 <= std_logic_vector(unsigned(i_reg_359) + unsigned(ap_const_lv9_1));
    icmp_ln140_fu_915_p2 <= "1" when (i_reg_359 = ap_const_lv9_1F4) else "0";
    icmp_ln142_fu_931_p2 <= "1" when (j_reg_370 = ap_const_lv4_8) else "0";
    icmp_ln173_fu_1139_p2 <= "1" when (j_1_reg_641 = ap_const_lv4_8) else "0";
    loop_index10_cast_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index10_reg_799),64));
    loop_index13_cast_fu_1297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index13_reg_788),64));
    loop_index16_cast_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index16_reg_777),64));
    loop_index19_cast_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index19_reg_766),64));
    loop_index22_cast_fu_1195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index22_reg_674),64));
    loop_index25_cast_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index25_reg_663),64));
    loop_index28_cast_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index28_reg_652),64));
    loop_index31_cast_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index31_reg_755),64));
    loop_index34_cast_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index34_reg_744),64));
    loop_index37_cast_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index37_reg_733),64));
    loop_index40_cast_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index40_reg_555),64));
    loop_index43_cast_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index43_reg_532),64));
    loop_index46_cast_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index46_reg_521),64));
    loop_index49_cast_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index49_reg_510),64));
    loop_index52_cast_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index52_reg_499),64));
    loop_index55_cast_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index55_reg_455),64));
    loop_index58_cast_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index58_reg_444),64));
    loop_index61_cast_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index61_reg_433),64));
    loop_index64_cast_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index64_reg_488),64));
    loop_index67_cast_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index67_reg_477),64));
    loop_index70_cast_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index70_reg_466),64));
    loop_index_cast_fu_1331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_810),64));

    power_buf_address0_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state102, ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_power_buf_address0, loop_index43_cast_fu_1106_p1, loop_index10_cast_fu_1314_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            power_buf_address0 <= loop_index10_cast_fu_1314_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            power_buf_address0 <= loop_index43_cast_fu_1106_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            power_buf_address0 <= grp_compute_fu_821_power_buf_address0;
        else 
            power_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    power_buf_ce0_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state102, ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_power_buf_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            power_buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            power_buf_ce0 <= grp_compute_fu_821_power_buf_ce0;
        else 
            power_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    power_buf_d0_assign_proc : process(empty_reg_1402, ap_CS_fsm_state79, ap_CS_fsm_state102, p_lcssa7_phi_reg_420)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            power_buf_d0 <= p_lcssa7_phi_reg_420;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            power_buf_d0 <= empty_reg_1402;
        else 
            power_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    power_buf_we0_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state102, exitcond8423_fu_1100_p2, exitcond10240_fu_1308_p2)
    begin
        if ((((exitcond10240_fu_1308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102)) or ((exitcond8423_fu_1100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            power_buf_we0 <= ap_const_logic_1;
        else 
            power_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result <= result_buf_q0;

    result_ap_vld_assign_proc : process(ap_CS_fsm_pp10_stage0, ap_block_pp10_stage0_11001, exitcond8525_reg_1521, ap_enable_reg_pp10_iter1)
    begin
        if (((ap_enable_reg_pp10_iter1 = ap_const_logic_1) and (exitcond8525_reg_1521 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then 
            result_ap_vld <= ap_const_logic_1;
        else 
            result_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    result_buf_address0_assign_proc : process(ap_CS_fsm_pp10_stage0, ap_enable_reg_pp10_iter0, ap_CS_fsm_pp21_stage0, ap_enable_reg_pp21_iter0, ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_result_buf_address0, loop_index40_cast_fu_1123_p1, ap_block_pp10_stage0, loop_index_cast_fu_1331_p1, ap_block_pp21_stage0)
    begin
        if (((ap_enable_reg_pp21_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp21_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp21_stage0))) then 
            result_buf_address0 <= loop_index_cast_fu_1331_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp10_stage0) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0))) then 
            result_buf_address0 <= loop_index40_cast_fu_1123_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            result_buf_address0 <= grp_compute_fu_821_result_buf_address0;
        else 
            result_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    result_buf_ce0_assign_proc : process(ap_CS_fsm_pp10_stage0, ap_enable_reg_pp10_iter0, ap_block_pp10_stage0_11001, ap_CS_fsm_pp21_stage0, ap_enable_reg_pp21_iter0, ap_block_pp21_stage0_11001, ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_result_buf_ce0)
    begin
        if ((((ap_enable_reg_pp21_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp21_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp21_stage0)) or ((ap_const_boolean_0 = ap_block_pp10_stage0_11001) and (ap_enable_reg_pp10_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp10_stage0)))) then 
            result_buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            result_buf_ce0 <= grp_compute_fu_821_result_buf_ce0;
        else 
            result_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_buf_we0_assign_proc : process(ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_result_buf_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            result_buf_we0 <= grp_compute_fu_821_result_buf_we0;
        else 
            result_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_o_assign_proc : process(temp_i, ap_CS_fsm_pp21_stage0, exitcond10341_reg_1635, ap_enable_reg_pp21_iter1, empty_68_fu_1336_p1, ap_block_pp21_stage0_01001)
    begin
        if (((ap_enable_reg_pp21_iter1 = ap_const_logic_1) and (exitcond10341_reg_1635 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp21_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp21_stage0))) then 
            temp_o <= empty_68_fu_1336_p1;
        else 
            temp_o <= temp_i;
        end if; 
    end process;


    temp_o_ap_vld_assign_proc : process(ap_CS_fsm_pp21_stage0, ap_block_pp21_stage0_11001, exitcond10341_reg_1635, ap_enable_reg_pp21_iter1)
    begin
        if (((ap_enable_reg_pp21_iter1 = ap_const_logic_1) and (exitcond10341_reg_1635 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp21_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp21_stage0))) then 
            temp_o_ap_vld <= ap_const_logic_1;
        else 
            temp_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    top_buf_address0_assign_proc : process(ap_CS_fsm_state65, ap_CS_fsm_state71, ap_CS_fsm_state76, ap_CS_fsm_state88, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_top_buf_address0, loop_index58_cast_fu_970_p1, loop_index67_cast_fu_1021_p1, loop_index49_cast_fu_1072_p1, loop_index25_cast_fu_1178_p1, loop_index34_cast_fu_1229_p1, loop_index16_cast_fu_1280_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            top_buf_address0 <= loop_index16_cast_fu_1280_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            top_buf_address0 <= loop_index34_cast_fu_1229_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            top_buf_address0 <= loop_index25_cast_fu_1178_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            top_buf_address0 <= loop_index49_cast_fu_1072_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            top_buf_address0 <= loop_index67_cast_fu_1021_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            top_buf_address0 <= loop_index58_cast_fu_970_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            top_buf_address0 <= grp_compute_fu_821_top_buf_address0;
        else 
            top_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    top_buf_ce0_assign_proc : process(ap_CS_fsm_state65, ap_CS_fsm_state71, ap_CS_fsm_state76, ap_CS_fsm_state88, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state81, ap_CS_fsm_state104, grp_compute_fu_821_top_buf_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            top_buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            top_buf_ce0 <= grp_compute_fu_821_top_buf_ce0;
        else 
            top_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    top_buf_d0_assign_proc : process(empty_10_reg_1416, ap_CS_fsm_state65, ap_CS_fsm_state71, ap_CS_fsm_state76, ap_CS_fsm_state88, ap_CS_fsm_state94, ap_CS_fsm_state99, p_lcssa9_phi_reg_381, empty_40_reg_613, empty_41_reg_627)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            top_buf_d0 <= p_lcssa9_phi_reg_381;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            top_buf_d0 <= empty_40_reg_613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            top_buf_d0 <= empty_41_reg_627;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            top_buf_d0 <= empty_10_reg_1416;
        else 
            top_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    top_buf_we0_assign_proc : process(ap_CS_fsm_state65, ap_CS_fsm_state71, ap_CS_fsm_state76, ap_CS_fsm_state88, ap_CS_fsm_state94, ap_CS_fsm_state99, exitcond7613_fu_964_p2, exitcond7917_fu_1015_p2, exitcond8221_fu_1066_p2, exitcond9431_fu_1172_p2, exitcond9735_fu_1223_p2, exitcond10038_fu_1274_p2)
    begin
        if ((((exitcond10038_fu_1274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((exitcond9735_fu_1223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94)) or ((exitcond9431_fu_1172_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88)) or ((exitcond8221_fu_1066_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76)) or ((exitcond7917_fu_1015_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((exitcond7613_fu_964_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65)))) then 
            top_buf_we0 <= ap_const_logic_1;
        else 
            top_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln146_fu_937_p1 <= j_reg_370(3 - 1 downto 0);
    trunc_ln177_fu_1145_p1 <= j_1_reg_641(3 - 1 downto 0);
end behav;
