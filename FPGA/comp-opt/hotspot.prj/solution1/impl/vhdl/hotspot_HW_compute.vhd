-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hotspot_HW_compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    result_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    result_buf_ce0 : OUT STD_LOGIC;
    result_buf_we0 : OUT STD_LOGIC;
    result_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    center_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    center_buf_ce0 : OUT STD_LOGIC;
    center_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    center_buf_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    center_buf_ce1 : OUT STD_LOGIC;
    center_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    top_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    top_buf_ce0 : OUT STD_LOGIC;
    top_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bottom_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    bottom_buf_ce0 : OUT STD_LOGIC;
    bottom_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    power_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    power_buf_ce0 : OUT STD_LOGIC;
    power_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cc : IN STD_LOGIC_VECTOR (31 downto 0);
    cn : IN STD_LOGIC_VECTOR (31 downto 0);
    cs : IN STD_LOGIC_VECTOR (31 downto 0);
    ce_r : IN STD_LOGIC_VECTOR (31 downto 0);
    cw : IN STD_LOGIC_VECTOR (31 downto 0);
    ct : IN STD_LOGIC_VECTOR (31 downto 0);
    cb : IN STD_LOGIC_VECTOR (31 downto 0);
    Cap : IN STD_LOGIC_VECTOR (31 downto 0);
    dt : IN STD_LOGIC_VECTOR (31 downto 0);
    amb_temp : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hotspot_HW_compute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_FC0 : STD_LOGIC_VECTOR (11 downto 0) := "111111000000";
    constant ap_const_lv12_40 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_241 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_reg_252 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_reg_263 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_306_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln28_reg_566 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_571_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_324_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln28_reg_581 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_1_fu_332_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_1_reg_589 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln28_1_fu_338_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln28_1_reg_595 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln28_fu_346_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln28_reg_600 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmp66_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp66_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp95_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp95_reg_611 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln32_fu_362_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln32_reg_616 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln32_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state14_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state35_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state41_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state44_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state47_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state53_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state56_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state59_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state62_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state65_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state68_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state71_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state74_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state77_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal zext_ln32_reg_621_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_621_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_fu_429_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_reg_626 : STD_LOGIC_VECTOR (11 downto 0);
    signal e_fu_448_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal e_reg_631 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_fu_462_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_reg_636 : STD_LOGIC_VECTOR (11 downto 0);
    signal s_fu_476_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal s_reg_641 : STD_LOGIC_VECTOR (11 downto 0);
    signal center_buf_load_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state15_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state30_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state36_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state39_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state42_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state45_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_state48_pp0_stage2_iter11 : BOOLEAN;
    signal ap_block_state51_pp0_stage2_iter12 : BOOLEAN;
    signal ap_block_state54_pp0_stage2_iter13 : BOOLEAN;
    signal ap_block_state57_pp0_stage2_iter14 : BOOLEAN;
    signal ap_block_state60_pp0_stage2_iter15 : BOOLEAN;
    signal ap_block_state63_pp0_stage2_iter16 : BOOLEAN;
    signal ap_block_state66_pp0_stage2_iter17 : BOOLEAN;
    signal ap_block_state69_pp0_stage2_iter18 : BOOLEAN;
    signal ap_block_state72_pp0_stage2_iter19 : BOOLEAN;
    signal ap_block_state75_pp0_stage2_iter20 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal top_buf_load_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal bottom_buf_load_reg_686 : STD_LOGIC_VECTOR (31 downto 0);
    signal power_buf_load_reg_691 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_492_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_1_reg_696 : STD_LOGIC_VECTOR (6 downto 0);
    signal center_buf_load_1_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal center_buf_load_2_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal center_buf_load_3_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal center_buf_load_4_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_736_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_736_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_736_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_736_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_736_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_736_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_736_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_736_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_reg_736_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_741_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul2_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_751_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_751_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_756_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul4_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul4_reg_761_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul4_reg_761_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul4_reg_761_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul4_reg_761_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_reg_766_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_reg_766_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_reg_766_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_reg_766_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_reg_766_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_reg_766_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal add1_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal add2_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal add4_reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal add5_reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add6_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal add7_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_245_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_y_phi_fu_256_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_x_phi_fu_267_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln41_2_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln41_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_1_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_3_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_274_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp6_mid1_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9_mid1_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_01_cast_fu_395_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid2_fu_366_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_fu_398_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln34_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_1_fu_423_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln34_fu_417_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln35_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_442_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln28_2_fu_378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_fu_456_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln28_3_fu_389_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_fu_470_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hotspot_HW_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hotspot_HW_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hotspot_HW_fdiv_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_7_full_dsp_1_U1 : component hotspot_HW_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_274_p0,
        din1 => grp_fu_274_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U2 : component hotspot_HW_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p0,
        din1 => grp_fu_278_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U3 : component hotspot_HW_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_282_p0,
        din1 => grp_fu_282_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_282_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U4 : component hotspot_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_286_p0,
        din1 => grp_fu_286_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_286_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U5 : component hotspot_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => grp_fu_292_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_292_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U6 : component hotspot_HW_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_296_p0,
        din1 => grp_fu_296_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_296_p2);

    fdiv_32ns_32ns_32_12_no_dsp_1_U7 : component hotspot_HW_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dt,
        din1 => Cap,
        ce => ap_const_logic_1,
        dout => grp_fu_300_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone)))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_241 <= add_ln28_reg_566;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvar_flatten_reg_241 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    x_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_reg_263 <= x_1_reg_696;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                x_reg_263 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    y_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                y_reg_252 <= select_ln28_1_reg_595;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                y_reg_252 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add1_reg_776 <= grp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_571_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add2_reg_781 <= grp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln28_reg_571_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add3_reg_786 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add4_reg_791 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_571_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add5_reg_796 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln28_reg_571_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add6_reg_801 <= grp_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571_pp0_iter20_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add7_reg_806 <= grp_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_fu_312_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln28_1_reg_589 <= add_ln28_1_fu_332_p2;
                cmp66_reg_606 <= cmp66_fu_350_p2;
                cmp95_reg_611 <= cmp95_fu_356_p2;
                icmp_ln29_reg_575 <= icmp_ln29_fu_318_p2;
                select_ln28_reg_581 <= select_ln28_fu_324_p3;
                trunc_ln28_reg_600 <= trunc_ln28_fu_346_p1;
                trunc_ln32_reg_616 <= trunc_ln32_fu_362_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln28_reg_566 <= add_ln28_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln28_reg_571_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_reg_771 <= grp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln28_reg_571 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                bottom_buf_load_reg_686 <= bottom_buf_q0;
                power_buf_load_reg_691 <= power_buf_q0;
                top_buf_load_reg_681 <= top_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                center_buf_load_1_reg_701 <= center_buf_q0;
                center_buf_load_2_reg_706 <= center_buf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_571_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                center_buf_load_3_reg_721 <= center_buf_q1;
                center_buf_load_4_reg_726 <= center_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln28_reg_571 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                center_buf_load_reg_666 <= center_buf_q0;
                x_1_reg_696 <= x_1_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                div_reg_556 <= grp_fu_300_p2;
                mul_reg_561 <= grp_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_571 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                e_reg_631 <= e_fu_448_p3;
                n_reg_636 <= n_fu_462_p3;
                s_reg_641 <= s_fu_476_p3;
                w_reg_626 <= w_fu_429_p3;
                    zext_ln32_reg_621(11 downto 0) <= zext_ln32_fu_404_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln28_reg_571 <= icmp_ln28_fu_312_p2;
                icmp_ln28_reg_571_pp0_iter10_reg <= icmp_ln28_reg_571_pp0_iter9_reg;
                icmp_ln28_reg_571_pp0_iter11_reg <= icmp_ln28_reg_571_pp0_iter10_reg;
                icmp_ln28_reg_571_pp0_iter12_reg <= icmp_ln28_reg_571_pp0_iter11_reg;
                icmp_ln28_reg_571_pp0_iter13_reg <= icmp_ln28_reg_571_pp0_iter12_reg;
                icmp_ln28_reg_571_pp0_iter14_reg <= icmp_ln28_reg_571_pp0_iter13_reg;
                icmp_ln28_reg_571_pp0_iter15_reg <= icmp_ln28_reg_571_pp0_iter14_reg;
                icmp_ln28_reg_571_pp0_iter16_reg <= icmp_ln28_reg_571_pp0_iter15_reg;
                icmp_ln28_reg_571_pp0_iter17_reg <= icmp_ln28_reg_571_pp0_iter16_reg;
                icmp_ln28_reg_571_pp0_iter18_reg <= icmp_ln28_reg_571_pp0_iter17_reg;
                icmp_ln28_reg_571_pp0_iter19_reg <= icmp_ln28_reg_571_pp0_iter18_reg;
                icmp_ln28_reg_571_pp0_iter1_reg <= icmp_ln28_reg_571;
                icmp_ln28_reg_571_pp0_iter20_reg <= icmp_ln28_reg_571_pp0_iter19_reg;
                icmp_ln28_reg_571_pp0_iter21_reg <= icmp_ln28_reg_571_pp0_iter20_reg;
                icmp_ln28_reg_571_pp0_iter2_reg <= icmp_ln28_reg_571_pp0_iter1_reg;
                icmp_ln28_reg_571_pp0_iter3_reg <= icmp_ln28_reg_571_pp0_iter2_reg;
                icmp_ln28_reg_571_pp0_iter4_reg <= icmp_ln28_reg_571_pp0_iter3_reg;
                icmp_ln28_reg_571_pp0_iter5_reg <= icmp_ln28_reg_571_pp0_iter4_reg;
                icmp_ln28_reg_571_pp0_iter6_reg <= icmp_ln28_reg_571_pp0_iter5_reg;
                icmp_ln28_reg_571_pp0_iter7_reg <= icmp_ln28_reg_571_pp0_iter6_reg;
                icmp_ln28_reg_571_pp0_iter8_reg <= icmp_ln28_reg_571_pp0_iter7_reg;
                icmp_ln28_reg_571_pp0_iter9_reg <= icmp_ln28_reg_571_pp0_iter8_reg;
                mul6_reg_736_pp0_iter10_reg <= mul6_reg_736_pp0_iter9_reg;
                mul6_reg_736_pp0_iter11_reg <= mul6_reg_736_pp0_iter10_reg;
                mul6_reg_736_pp0_iter3_reg <= mul6_reg_736;
                mul6_reg_736_pp0_iter4_reg <= mul6_reg_736_pp0_iter3_reg;
                mul6_reg_736_pp0_iter5_reg <= mul6_reg_736_pp0_iter4_reg;
                mul6_reg_736_pp0_iter6_reg <= mul6_reg_736_pp0_iter5_reg;
                mul6_reg_736_pp0_iter7_reg <= mul6_reg_736_pp0_iter6_reg;
                mul6_reg_736_pp0_iter8_reg <= mul6_reg_736_pp0_iter7_reg;
                mul6_reg_736_pp0_iter9_reg <= mul6_reg_736_pp0_iter8_reg;
                mul7_reg_741_pp0_iter10_reg <= mul7_reg_741_pp0_iter9_reg;
                mul7_reg_741_pp0_iter11_reg <= mul7_reg_741_pp0_iter10_reg;
                mul7_reg_741_pp0_iter12_reg <= mul7_reg_741_pp0_iter11_reg;
                mul7_reg_741_pp0_iter13_reg <= mul7_reg_741_pp0_iter12_reg;
                mul7_reg_741_pp0_iter14_reg <= mul7_reg_741_pp0_iter13_reg;
                mul7_reg_741_pp0_iter3_reg <= mul7_reg_741;
                mul7_reg_741_pp0_iter4_reg <= mul7_reg_741_pp0_iter3_reg;
                mul7_reg_741_pp0_iter5_reg <= mul7_reg_741_pp0_iter4_reg;
                mul7_reg_741_pp0_iter6_reg <= mul7_reg_741_pp0_iter5_reg;
                mul7_reg_741_pp0_iter7_reg <= mul7_reg_741_pp0_iter6_reg;
                mul7_reg_741_pp0_iter8_reg <= mul7_reg_741_pp0_iter7_reg;
                mul7_reg_741_pp0_iter9_reg <= mul7_reg_741_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul1_reg_731 <= grp_fu_286_p2;
                mul6_reg_736 <= grp_fu_292_p2;
                mul7_reg_741 <= grp_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_571_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul2_reg_746 <= grp_fu_286_p2;
                mul3_reg_751 <= grp_fu_292_p2;
                mul8_reg_756 <= grp_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul3_reg_751_pp0_iter3_reg <= mul3_reg_751;
                mul3_reg_751_pp0_iter4_reg <= mul3_reg_751_pp0_iter3_reg;
                mul8_reg_756_pp0_iter10_reg <= mul8_reg_756_pp0_iter9_reg;
                mul8_reg_756_pp0_iter11_reg <= mul8_reg_756_pp0_iter10_reg;
                mul8_reg_756_pp0_iter12_reg <= mul8_reg_756_pp0_iter11_reg;
                mul8_reg_756_pp0_iter13_reg <= mul8_reg_756_pp0_iter12_reg;
                mul8_reg_756_pp0_iter14_reg <= mul8_reg_756_pp0_iter13_reg;
                mul8_reg_756_pp0_iter15_reg <= mul8_reg_756_pp0_iter14_reg;
                mul8_reg_756_pp0_iter16_reg <= mul8_reg_756_pp0_iter15_reg;
                mul8_reg_756_pp0_iter3_reg <= mul8_reg_756;
                mul8_reg_756_pp0_iter4_reg <= mul8_reg_756_pp0_iter3_reg;
                mul8_reg_756_pp0_iter5_reg <= mul8_reg_756_pp0_iter4_reg;
                mul8_reg_756_pp0_iter6_reg <= mul8_reg_756_pp0_iter5_reg;
                mul8_reg_756_pp0_iter7_reg <= mul8_reg_756_pp0_iter6_reg;
                mul8_reg_756_pp0_iter8_reg <= mul8_reg_756_pp0_iter7_reg;
                mul8_reg_756_pp0_iter9_reg <= mul8_reg_756_pp0_iter8_reg;
                    zext_ln32_reg_621_pp0_iter10_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter9_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter11_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter10_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter12_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter11_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter13_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter12_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter14_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter13_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter15_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter14_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter16_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter15_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter17_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter16_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter18_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter17_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter19_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter18_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter1_reg(11 downto 0) <= zext_ln32_reg_621(11 downto 0);
                    zext_ln32_reg_621_pp0_iter20_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter19_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter2_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter1_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter3_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter2_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter4_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter3_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter5_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter4_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter6_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter5_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter7_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter6_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter8_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter7_reg(11 downto 0);
                    zext_ln32_reg_621_pp0_iter9_reg(11 downto 0) <= zext_ln32_reg_621_pp0_iter8_reg(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln28_reg_571_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul4_reg_761 <= grp_fu_286_p2;
                mul5_reg_766 <= grp_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul4_reg_761_pp0_iter3_reg <= mul4_reg_761;
                mul4_reg_761_pp0_iter4_reg <= mul4_reg_761_pp0_iter3_reg;
                mul4_reg_761_pp0_iter5_reg <= mul4_reg_761_pp0_iter4_reg;
                mul4_reg_761_pp0_iter6_reg <= mul4_reg_761_pp0_iter5_reg;
                mul5_reg_766_pp0_iter3_reg <= mul5_reg_766;
                mul5_reg_766_pp0_iter4_reg <= mul5_reg_766_pp0_iter3_reg;
                mul5_reg_766_pp0_iter5_reg <= mul5_reg_766_pp0_iter4_reg;
                mul5_reg_766_pp0_iter6_reg <= mul5_reg_766_pp0_iter5_reg;
                mul5_reg_766_pp0_iter7_reg <= mul5_reg_766_pp0_iter6_reg;
                mul5_reg_766_pp0_iter8_reg <= mul5_reg_766_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_fu_312_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln28_1_reg_595 <= select_ln28_1_fu_338_p3;
            end if;
        end if;
    end process;
    zext_ln32_reg_621(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter1_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter3_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter4_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter5_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter6_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter7_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter8_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter9_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter10_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter11_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter12_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter13_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter14_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter15_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter16_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter17_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter18_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter19_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_621_pp0_iter20_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln28_fu_312_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter20)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln28_fu_312_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln28_fu_312_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln28_1_fu_332_p2 <= std_logic_vector(unsigned(ap_phi_mux_y_phi_fu_256_p4) + unsigned(ap_const_lv7_1));
    add_ln28_fu_306_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_245_p4) + unsigned(ap_const_lv13_1));
    add_ln34_1_fu_423_p3 <= (trunc_ln28_reg_600 & trunc_ln32_reg_616);
    add_ln34_fu_417_p2 <= std_logic_vector(unsigned(c_fu_398_p2) + unsigned(ap_const_lv12_FFF));
    add_ln35_fu_442_p2 <= std_logic_vector(unsigned(c_fu_398_p2) + unsigned(ap_const_lv12_1));
    add_ln36_fu_456_p2 <= std_logic_vector(unsigned(c_fu_398_p2) + unsigned(ap_const_lv12_FC0));
    add_ln37_fu_470_p2 <= std_logic_vector(unsigned(c_fu_398_p2) + unsigned(ap_const_lv12_40));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state78 <= ap_CS_fsm(15);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage2_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage2_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage2_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage2_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage2_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage2_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage2_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage2_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage2_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state13_assign_proc : process(icmp_ln28_fu_312_p2)
    begin
        if ((icmp_ln28_fu_312_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_245_p4_assign_proc : process(indvar_flatten_reg_241, add_ln28_reg_566, ap_CS_fsm_pp0_stage0, icmp_ln28_reg_571, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_245_p4 <= add_ln28_reg_566;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_245_p4 <= indvar_flatten_reg_241;
        end if; 
    end process;


    ap_phi_mux_x_phi_fu_267_p4_assign_proc : process(x_reg_263, ap_CS_fsm_pp0_stage0, icmp_ln28_reg_571, x_1_reg_696, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_x_phi_fu_267_p4 <= x_1_reg_696;
        else 
            ap_phi_mux_x_phi_fu_267_p4 <= x_reg_263;
        end if; 
    end process;


    ap_phi_mux_y_phi_fu_256_p4_assign_proc : process(y_reg_252, ap_CS_fsm_pp0_stage0, icmp_ln28_reg_571, select_ln28_1_reg_595, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_571 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_y_phi_fu_256_p4 <= select_ln28_1_reg_595;
        else 
            ap_phi_mux_y_phi_fu_256_p4 <= y_reg_252;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bottom_buf_address0 <= zext_ln32_fu_404_p1(12 - 1 downto 0);

    bottom_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            bottom_buf_ce0 <= ap_const_logic_1;
        else 
            bottom_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_398_p2 <= std_logic_vector(unsigned(x_01_cast_fu_395_p1) + unsigned(p_mid2_fu_366_p3));

    center_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln32_fu_404_p1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln41_2_fu_484_p1, ap_block_pp0_stage2, zext_ln41_3_fu_501_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            center_buf_address0 <= zext_ln41_3_fu_501_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            center_buf_address0 <= zext_ln41_2_fu_484_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            center_buf_address0 <= zext_ln32_fu_404_p1(12 - 1 downto 0);
        else 
            center_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    center_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln41_fu_488_p1, zext_ln41_1_fu_497_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            center_buf_address1 <= zext_ln41_1_fu_497_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            center_buf_address1 <= zext_ln41_fu_488_p1(12 - 1 downto 0);
        else 
            center_buf_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    center_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            center_buf_ce0 <= ap_const_logic_1;
        else 
            center_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    center_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            center_buf_ce1 <= ap_const_logic_1;
        else 
            center_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cmp66_fu_350_p2 <= "1" when (ap_phi_mux_y_phi_fu_256_p4 = ap_const_lv7_0) else "0";
    cmp6_mid1_fu_373_p2 <= "1" when (add_ln28_1_reg_589 = ap_const_lv7_0) else "0";
    cmp95_fu_356_p2 <= "1" when (ap_phi_mux_y_phi_fu_256_p4 = ap_const_lv7_3F) else "0";
    cmp9_mid1_fu_384_p2 <= "1" when (add_ln28_1_reg_589 = ap_const_lv7_3F) else "0";
    e_fu_448_p3 <= 
        add_ln34_1_fu_423_p3 when (icmp_ln35_fu_437_p2(0) = '1') else 
        add_ln35_fu_442_p2;

    grp_fu_274_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul1_reg_731, ap_enable_reg_pp0_iter2, add_reg_771, add1_reg_776, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_274_p0 <= add1_reg_776;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_274_p0 <= add_reg_771;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_274_p0 <= mul1_reg_731;
        else 
            grp_fu_274_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_274_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, mul2_reg_746, mul3_reg_751_pp0_iter4_reg, mul4_reg_761_pp0_iter6_reg, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_274_p1 <= mul4_reg_761_pp0_iter6_reg;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_274_p1 <= mul3_reg_751_pp0_iter4_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_274_p1 <= mul2_reg_746;
        else 
            grp_fu_274_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, add2_reg_781, ap_enable_reg_pp0_iter9, add3_reg_786, add4_reg_791, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_278_p0 <= add4_reg_791;
        elsif (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_278_p0 <= add3_reg_786;
        elsif (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_278_p0 <= add2_reg_781;
        else 
            grp_fu_278_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul6_reg_736_pp0_iter11_reg, mul7_reg_741_pp0_iter14_reg, mul5_reg_766_pp0_iter8_reg, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_278_p1 <= mul7_reg_741_pp0_iter14_reg;
        elsif (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_278_p1 <= mul6_reg_736_pp0_iter11_reg;
        elsif (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_278_p1 <= mul5_reg_766_pp0_iter8_reg;
        else 
            grp_fu_278_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_282_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, add5_reg_796, ap_enable_reg_pp0_iter16, add6_reg_801, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_282_p0 <= add6_reg_801;
        elsif (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_282_p0 <= add5_reg_796;
        else 
            grp_fu_282_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_282_p1_assign_proc : process(mul_reg_561, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, mul8_reg_756_pp0_iter16_reg, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_282_p1 <= mul_reg_561;
        elsif (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_282_p1 <= mul8_reg_756_pp0_iter16_reg;
        else 
            grp_fu_282_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_286_p0_assign_proc : process(ct, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, center_buf_load_reg_666, ap_CS_fsm_pp0_stage2, center_buf_load_1_reg_701, ap_enable_reg_pp0_iter1, center_buf_load_3_reg_721, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_286_p0 <= center_buf_load_3_reg_721;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_286_p0 <= center_buf_load_1_reg_701;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_286_p0 <= center_buf_load_reg_666;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_286_p0 <= ct;
        else 
            grp_fu_286_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_286_p1_assign_proc : process(cc, cn, ce_r, amb_temp, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_286_p1 <= ce_r;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_286_p1 <= cn;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_286_p1 <= cc;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_286_p1 <= amb_temp;
        else 
            grp_fu_286_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, top_buf_load_reg_681, ap_enable_reg_pp0_iter1, center_buf_load_2_reg_706, center_buf_load_4_reg_726, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_292_p0 <= center_buf_load_4_reg_726;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_292_p0 <= center_buf_load_2_reg_706;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_292_p0 <= top_buf_load_reg_681;
            else 
                grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p1_assign_proc : process(cs, cw, ct, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_292_p1 <= cw;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_292_p1 <= cs;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_292_p1 <= ct;
            else 
                grp_fu_292_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_292_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_296_p0_assign_proc : process(div_reg_556, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, bottom_buf_load_reg_686, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_296_p0 <= div_reg_556;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_296_p0 <= bottom_buf_load_reg_686;
            else 
                grp_fu_296_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_296_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_296_p1_assign_proc : process(cb, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, power_buf_load_reg_691, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_296_p1 <= power_buf_load_reg_691;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_296_p1 <= cb;
            else 
                grp_fu_296_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_296_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln28_fu_312_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_245_p4 = ap_const_lv13_1000) else "0";
    icmp_ln29_fu_318_p2 <= "1" when (ap_phi_mux_x_phi_fu_267_p4 = ap_const_lv7_40) else "0";
    icmp_ln34_fu_412_p2 <= "1" when (select_ln28_reg_581 = ap_const_lv7_0) else "0";
    icmp_ln35_fu_437_p2 <= "1" when (select_ln28_reg_581 = ap_const_lv7_3F) else "0";
    n_fu_462_p3 <= 
        add_ln34_1_fu_423_p3 when (select_ln28_2_fu_378_p3(0) = '1') else 
        add_ln36_fu_456_p2;
    p_mid2_fu_366_p3 <= (trunc_ln28_reg_600 & ap_const_lv6_0);
    power_buf_address0 <= zext_ln32_fu_404_p1(12 - 1 downto 0);

    power_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            power_buf_ce0 <= ap_const_logic_1;
        else 
            power_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_buf_address0 <= zext_ln32_reg_621_pp0_iter20_reg(12 - 1 downto 0);

    result_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            result_buf_ce0 <= ap_const_logic_1;
        else 
            result_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_buf_d0 <= add7_reg_806;

    result_buf_we0_assign_proc : process(icmp_ln28_reg_571_pp0_iter21_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_571_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            result_buf_we0 <= ap_const_logic_1;
        else 
            result_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    s_fu_476_p3 <= 
        add_ln34_1_fu_423_p3 when (select_ln28_3_fu_389_p3(0) = '1') else 
        add_ln37_fu_470_p2;
    select_ln28_1_fu_338_p3 <= 
        add_ln28_1_fu_332_p2 when (icmp_ln29_fu_318_p2(0) = '1') else 
        ap_phi_mux_y_phi_fu_256_p4;
    select_ln28_2_fu_378_p3 <= 
        cmp6_mid1_fu_373_p2 when (icmp_ln29_reg_575(0) = '1') else 
        cmp66_reg_606;
    select_ln28_3_fu_389_p3 <= 
        cmp9_mid1_fu_384_p2 when (icmp_ln29_reg_575(0) = '1') else 
        cmp95_reg_611;
    select_ln28_fu_324_p3 <= 
        ap_const_lv7_0 when (icmp_ln29_fu_318_p2(0) = '1') else 
        ap_phi_mux_x_phi_fu_267_p4;
    top_buf_address0 <= zext_ln32_fu_404_p1(12 - 1 downto 0);

    top_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            top_buf_ce0 <= ap_const_logic_1;
        else 
            top_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln28_fu_346_p1 <= select_ln28_1_fu_338_p3(6 - 1 downto 0);
    trunc_ln32_fu_362_p1 <= select_ln28_fu_324_p3(6 - 1 downto 0);
    w_fu_429_p3 <= 
        add_ln34_1_fu_423_p3 when (icmp_ln34_fu_412_p2(0) = '1') else 
        add_ln34_fu_417_p2;
    x_01_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_reg_581),12));
    x_1_fu_492_p2 <= std_logic_vector(unsigned(select_ln28_reg_581) + unsigned(ap_const_lv7_1));
    zext_ln32_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_398_p2),64));
    zext_ln41_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e_reg_631),64));
    zext_ln41_2_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_636),64));
    zext_ln41_3_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_626),64));
    zext_ln41_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_reg_641),64));
end behav;
